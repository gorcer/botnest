{
    "sourceFile": "src/analitics/accountsReadyToBuy.service.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 83,
            "patches": [
                {
                    "date": 1691633172469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691633223936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,13 @@\n import { OrderService } from '../order/order.service';\n import { TestOrderService } from '../order/mock/testorder.service';\n import { equal } from 'assert';\n import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n \n-describe('LonelyTraderService', () => {\n-  let trader: LonelyTraderService;\n-  let orders: OrderService;\n-  let testOrderRepository = {\n-    create: (data) => {\n-      console.log('CREATE', data);\n-    }\n-  }\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n \n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       imports: [\n@@ -28,28 +24,9 @@\n           envFilePath: '.test.env',\n         }),\n       ],\n       providers: [\n-        BotService,\n-        MockedExchange,\n-        AccountService,\n-        LonelyTraderService,\n-        {\n-          provide: PublicApiService,\n-          useValue: new ApiService(MockedExchange),\n-        },\n-        {\n-          provide: FileLogService,\n-          useClass: SilentLogService,\n-        },\n-        {\n-          provide: BalanceService,\n-          useClass: TestBalanceService,\n-        },\n-        {\n-          provide: OrderService,\n-          useClass: TestOrderService,\n-        },\n+        AccountsReadyToBuy\n       ],\n     }).compile();\n \n     trader = module.get<LonelyTraderService>(LonelyTraderService);\n"
                },
                {
                    "date": 1691633261498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { MockedExchange } from '../exchange/mock/mocked.exchange';\n+import { AccountService } from '../exchange/account.service';\n+import { PublicApiService } from '../exchange/publicApi.service';\n+import { ApiService } from '../exchange/api.service';\n+import { FileLogService } from '../log/filelog.service';\n+import { SilentLogService } from '../log/silentlog.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { TestBalanceService } from '../balance/mock/testbalance.service';\n+import { OrderService } from '../order/order.service';\n+import { TestOrderService } from '../order/mock/testorder.service';\n+import { equal } from 'assert';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+\n+    trader = module.get<LonelyTraderService>(LonelyTraderService);\n+    orders = module.get<OrderService>(OrderService);\n+  });\n+\n+  it('should be defined', () => {\n+    expect(trader).toBeDefined();\n+  });\n+\n+  it('should rate to be occupied', async () => {\n+    orders.create({\n+      accountId: 1,\n+      amount1: 0.1,\n+      amount2: 1,\n+      rate: 10,\n+      extOrderId: String(1),\n+      expectedRate: 1,\n+      currency1: \"BTC\",\n+      currency2: \"BUSD\"\n+    });\n+\n+    orders.create({\n+      accountId: 1,\n+      amount1: 0.1,\n+      amount2: 1,\n+      rate: 5,\n+      extOrderId: String(1),\n+      expectedRate: 1,\n+      currency1: \"BTC\",\n+      currency2: \"BUSD\"\n+    });\n+\n+\n+    const activeOrders = await trader.loadActiveOrders();\n+\n+    {\n+      const isRateOccupied = trader.isRateOccupied(10, activeOrders, 0.1);\n+      equal(isRateOccupied, true);\n+    }\n+\n+    {\n+      const isRateOccupied = trader.isRateOccupied(7, activeOrders, 0.1);\n+      equal(isRateOccupied, false);\n+    }\n+\n+    {\n+      const isRateOccupied = trader.isRateOccupied(5.3, activeOrders, 0.1);\n+      equal(isRateOccupied, true);\n+    }\n+  });\n+});\n"
                },
                {
                    "date": 1691633272229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { MockedExchange } from '../exchange/mock/mocked.exchange';\n+import { AccountService } from '../exchange/account.service';\n+import { PublicApiService } from '../exchange/publicApi.service';\n+import { ApiService } from '../exchange/api.service';\n+import { FileLogService } from '../log/filelog.service';\n+import { SilentLogService } from '../log/silentlog.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { TestBalanceService } from '../balance/mock/testbalance.service';\n+import { OrderService } from '../order/order.service';\n+import { TestOrderService } from '../order/mock/testorder.service';\n+import { equal } from 'assert';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+  });\n+\n+  it('should be defined', () => {\n+    expect(trader).toBeDefined();\n+  });\n+\n+  it('should rate to be occupied', async () => {\n+    orders.create({\n+      accountId: 1,\n+      amount1: 0.1,\n+      amount2: 1,\n+      rate: 10,\n+      extOrderId: String(1),\n+      expectedRate: 1,\n+      currency1: \"BTC\",\n+      currency2: \"BUSD\"\n+    });\n+\n+    orders.create({\n+      accountId: 1,\n+      amount1: 0.1,\n+      amount2: 1,\n+      rate: 5,\n+      extOrderId: String(1),\n+      expectedRate: 1,\n+      currency1: \"BTC\",\n+      currency2: \"BUSD\"\n+    });\n+\n+\n+    const activeOrders = await trader.loadActiveOrders();\n+\n+    {\n+      const isRateOccupied = trader.isRateOccupied(10, activeOrders, 0.1);\n+      equal(isRateOccupied, true);\n+    }\n+\n+    {\n+      const isRateOccupied = trader.isRateOccupied(7, activeOrders, 0.1);\n+      equal(isRateOccupied, false);\n+    }\n+\n+    {\n+      const isRateOccupied = trader.isRateOccupied(5.3, activeOrders, 0.1);\n+      equal(isRateOccupied, true);\n+    }\n+  });\n+});\n"
                },
                {
                    "date": 1691633287403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { MockedExchange } from '../exchange/mock/mocked.exchange';\n+import { AccountService } from '../exchange/account.service';\n+import { PublicApiService } from '../exchange/publicApi.service';\n+import { ApiService } from '../exchange/api.service';\n+import { FileLogService } from '../log/filelog.service';\n+import { SilentLogService } from '../log/silentlog.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { TestBalanceService } from '../balance/mock/testbalance.service';\n+import { OrderService } from '../order/order.service';\n+import { TestOrderService } from '../order/mock/testorder.service';\n+import { equal } from 'assert';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691633411781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,265 +34,13 @@\n           useClass: Repository,\n         },\n       ],\n     }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccAccountsReadyToBuyountService);\n   });\n \n   it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { MockedExchange } from '../exchange/mock/mocked.exchange';\n-import { AccountService } from '../exchange/account.service';\n-import { PublicApiService } from '../exchange/publicApi.service';\n-import { ApiService } from '../exchange/api.service';\n-import { FileLogService } from '../log/filelog.service';\n-import { SilentLogService } from '../log/silentlog.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { TestBalanceService } from '../balance/mock/testbalance.service';\n-import { OrderService } from '../order/order.service';\n-import { TestOrderService } from '../order/mock/testorder.service';\n-import { equal } from 'assert';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-  });\n-\n-  it('should be defined', () => {\n-    expect(trader).toBeDefined();\n-  });\n-\n-  it('should rate to be occupied', async () => {\n-    orders.create({\n-      accountId: 1,\n-      amount1: 0.1,\n-      amount2: 1,\n-      rate: 10,\n-      extOrderId: String(1),\n-      expectedRate: 1,\n-      currency1: \"BTC\",\n-      currency2: \"BUSD\"\n-    });\n-\n-    orders.create({\n-      accountId: 1,\n-      amount1: 0.1,\n-      amount2: 1,\n-      rate: 5,\n-      extOrderId: String(1),\n-      expectedRate: 1,\n-      currency1: \"BTC\",\n-      currency2: \"BUSD\"\n-    });\n-\n-\n-    const activeOrders = await trader.loadActiveOrders();\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(10, activeOrders, 0.1);\n-      equal(isRateOccupied, true);\n-    }\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(7, activeOrders, 0.1);\n-      equal(isRateOccupied, false);\n-    }\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(5.3, activeOrders, 0.1);\n-      equal(isRateOccupied, true);\n-    }\n-  });\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { MockedExchange } from '../exchange/mock/mocked.exchange';\n-import { AccountService } from '../exchange/account.service';\n-import { PublicApiService } from '../exchange/publicApi.service';\n-import { ApiService } from '../exchange/api.service';\n-import { FileLogService } from '../log/filelog.service';\n-import { SilentLogService } from '../log/silentlog.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { TestBalanceService } from '../balance/mock/testbalance.service';\n-import { OrderService } from '../order/order.service';\n-import { TestOrderService } from '../order/mock/testorder.service';\n-import { equal } from 'assert';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-\n-    trader = module.get<LonelyTraderService>(LonelyTraderService);\n-    orders = module.get<OrderService>(OrderService);\n-  });\n-\n-  it('should be defined', () => {\n-    expect(trader).toBeDefined();\n-  });\n-\n-  it('should rate to be occupied', async () => {\n-    orders.create({\n-      accountId: 1,\n-      amount1: 0.1,\n-      amount2: 1,\n-      rate: 10,\n-      extOrderId: String(1),\n-      expectedRate: 1,\n-      currency1: \"BTC\",\n-      currency2: \"BUSD\"\n-    });\n-\n-    orders.create({\n-      accountId: 1,\n-      amount1: 0.1,\n-      amount2: 1,\n-      rate: 5,\n-      extOrderId: String(1),\n-      expectedRate: 1,\n-      currency1: \"BTC\",\n-      currency2: \"BUSD\"\n-    });\n-\n-\n-    const activeOrders = await trader.loadActiveOrders();\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(10, activeOrders, 0.1);\n-      equal(isRateOccupied, true);\n-    }\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(7, activeOrders, 0.1);\n-      equal(isRateOccupied, false);\n-    }\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(5.3, activeOrders, 0.1);\n-      equal(isRateOccupied, true);\n-    }\n-  });\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { MockedExchange } from '../exchange/mock/mocked.exchange';\n-import { AccountService } from '../exchange/account.service';\n-import { PublicApiService } from '../exchange/publicApi.service';\n-import { ApiService } from '../exchange/api.service';\n-import { FileLogService } from '../log/filelog.service';\n-import { SilentLogService } from '../log/silentlog.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { TestBalanceService } from '../balance/mock/testbalance.service';\n-import { OrderService } from '../order/order.service';\n-import { TestOrderService } from '../order/mock/testorder.service';\n-import { equal } from 'assert';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-      ],\n-      providers: [\n-        AccountsReadyToBuy\n-      ],\n-    }).compile();\n-\n-    trader = module.get<LonelyTraderService>(LonelyTraderService);\n-    orders = module.get<OrderService>(OrderService);\n-  });\n-\n-  it('should be defined', () => {\n-    expect(trader).toBeDefined();\n-  });\n-\n-  it('should rate to be occupied', async () => {\n-    orders.create({\n-      accountId: 1,\n-      amount1: 0.1,\n-      amount2: 1,\n-      rate: 10,\n-      extOrderId: String(1),\n-      expectedRate: 1,\n-      currency1: \"BTC\",\n-      currency2: \"BUSD\"\n-    });\n-\n-    orders.create({\n-      accountId: 1,\n-      amount1: 0.1,\n-      amount2: 1,\n-      rate: 5,\n-      extOrderId: String(1),\n-      expectedRate: 1,\n-      currency1: \"BTC\",\n-      currency2: \"BUSD\"\n-    });\n-\n-\n-    const activeOrders = await trader.loadActiveOrders();\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(10, activeOrders, 0.1);\n-      equal(isRateOccupied, true);\n-    }\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(7, activeOrders, 0.1);\n-      equal(isRateOccupied, false);\n-    }\n-\n-    {\n-      const isRateOccupied = trader.isRateOccupied(5.3, activeOrders, 0.1);\n-      equal(isRateOccupied, true);\n-    }\n-  });\n-});\n"
                },
                {
                    "date": 1691633469455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         },\n       ],\n     }).compile();\n \n-    service = module.get<AccountsReadyToBuy>(AccAccountsReadyToBuyountService);\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n   });\n \n   it('should be defined', () => {\n     expect(service).toBeDefined();\n"
                },
                {
                    "date": 1691633537921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,19 +14,22 @@\n import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n import { Balance } from '../balance/entities/balance.entity';\n import { getRepositoryToken } from '@nestjs/typeorm';\n import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n \n describe('AccountsReadyToBuy', () => {\n   \n   let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n \n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       imports: [\n         ConfigModule.forRoot({\n           envFilePath: '.test.env',\n         }),\n+        OrderModule\n       ],\n       providers: [\n         AccountsReadyToBuy,\n         {\n@@ -36,8 +39,10 @@\n       ],\n     }).compile();\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n   });\n \n   it('should be defined', () => {\n     expect(service).toBeDefined();\n"
                },
                {
                    "date": 1691633771650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,11 @@\n import { Test, TestingModule } from '@nestjs/testing';\n-import { MockedExchange } from '../exchange/mock/mocked.exchange';\n-import { AccountService } from '../exchange/account.service';\n-import { PublicApiService } from '../exchange/publicApi.service';\n-import { ApiService } from '../exchange/api.service';\n-import { FileLogService } from '../log/filelog.service';\n-import { SilentLogService } from '../log/silentlog.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { TestBalanceService } from '../balance/mock/testbalance.service';\n import { OrderService } from '../order/order.service';\n-import { TestOrderService } from '../order/mock/testorder.service';\n-import { equal } from 'assert';\n import { ConfigModule } from '@nestjs/config';\n import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n import { Balance } from '../balance/entities/balance.entity';\n import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n+import { Repository, getConnection } from 'typeorm';\n import { OrderModule } from '../order/order.module';\n \n describe('AccountsReadyToBuy', () => {\n   \n@@ -41,8 +31,10 @@\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n     orderService = module.get<OrderService>(OrderService);\n \n+    \n+\n   });\n \n   it('should be defined', () => {\n     expect(service).toBeDefined();\n"
                },
                {
                    "date": 1691633823530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,5 +39,9 @@\n   it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n \n+  it('get orders', () => {\n+    \n+  });\n+\n });\n"
                },
                {
                    "date": 1691633903368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', () => {\n+    const orders = service.get();\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691633930629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', () => {\n+    const orders = service.get(0.001, 0.0001);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691633937092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', () => {\n+    const orders = service.get(0.001, 0.0001);\n+    console.log(orders);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691633978697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+        {\n+          provide: getRepositoryToken(Order),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', () => {\n+    const orders = service.get(0.001, 0.0001);\n+    console.log(orders);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691634054807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,25 +18,25 @@\n       imports: [\n         ConfigModule.forRoot({\n           envFilePath: '.test.env',\n         }),\n-        OrderModule\n+        // OrderModule\n       ],\n       providers: [\n         AccountsReadyToBuy,\n         {\n           provide: getRepositoryToken(Balance),\n           useClass: Repository,\n         },\n-        {\n-          provide: getRepositoryToken(Order),\n-          useClass: Repository,\n-        },\n+        // {\n+        //   provide: getRepositoryToken(Order),\n+        //   useClass: Repository,\n+        // },\n       ],\n     }).compile();\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n+    // orderService = module.get<OrderService>(OrderService);\n \n     \n \n   });\n@@ -50,193 +50,4 @@\n     console.log(orders);\n   });\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', () => {\n-    const orders = service.get(0.001, 0.0001);\n-    console.log(orders);\n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', () => {\n-    const orders = service.get(0.001, 0.0001);\n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', () => {\n-    const orders = service.get();\n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', () => {\n-    \n-  });\n-\n-});\n"
                },
                {
                    "date": 1691634095761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     expect(service).toBeDefined();\n   });\n \n   it('get orders', () => {\n-    const orders = service.get(0.001, 0.0001);\n+    const orders = await service.get(0.001, 0.0001);\n     console.log(orders);\n   });\n \n });\n"
                },
                {
                    "date": 1691634383436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n describe('AccountsReadyToBuy', () => {\n   \n   let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n+  // let orderService: OrderService;\n \n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       imports: [\n@@ -44,10 +44,10 @@\n   it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n \n-  it('get orders', () => {\n-    const orders = await service.get(0.001, 0.0001);\n-    console.log(orders);\n+  it('get orders', async () => {\n+    // const orders = await service.get(0.001, 0.0001);\n+    // console.log(orders);\n   });\n \n });\n"
                },
                {
                    "date": 1691634875117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  // let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        // OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+        // {\n+        //   provide: getRepositoryToken(Order),\n+        //   useClass: Repository,\n+        // },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    // orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+    // const orders = await service.get(0.001, 0.0001);\n+    // console.log(orders);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691634956020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        // OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+        // {\n+        //   provide: getRepositoryToken(Order),\n+        //   useClass: Repository,\n+        // },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+    const orders = await service.get(0.001, 0.0001);\n+    console.log(orders);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635023421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        // OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+        {\n+          provide: getRepositoryToken(Balance),\n+          useClass: Repository,\n+        },\n+        {\n+          provide: getRepositoryToken(Order),\n+          useClass: Repository,\n+        },\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+    const orders = await service.get(0.001, 0.0001);\n+    console.log(orders);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635389634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+\n+    \n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+    const orders = await service.get(0.001, 0.0001);\n+    console.log(orders);\n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635398144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,10 @@\n       ],\n     }).compile();\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n+    orderService = module.get<OrderService>(OrderService);    \n \n-    \n-\n   });\n \n   it('should be defined', () => {\n     expect(service).toBeDefined();\n@@ -45,225 +43,4 @@\n     console.log(orders);\n   });\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        // OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-        {\n-          provide: getRepositoryToken(Order),\n-          useClass: Repository,\n-        },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-    const orders = await service.get(0.001, 0.0001);\n-    console.log(orders);\n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        // OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-        // {\n-        //   provide: getRepositoryToken(Order),\n-        //   useClass: Repository,\n-        // },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-    const orders = await service.get(0.001, 0.0001);\n-    console.log(orders);\n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  // let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        // OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-        // {\n-        //   provide: getRepositoryToken(Order),\n-        //   useClass: Repository,\n-        // },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    // orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-    // const orders = await service.get(0.001, 0.0001);\n-    // console.log(orders);\n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  // let orderService: OrderService;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        // OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-        {\n-          provide: getRepositoryToken(Balance),\n-          useClass: Repository,\n-        },\n-        // {\n-        //   provide: getRepositoryToken(Order),\n-        //   useClass: Repository,\n-        // },\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    // orderService = module.get<OrderService>(OrderService);\n-\n-    \n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-    // const orders = await service.get(0.001, 0.0001);\n-    // console.log(orders);\n-  });\n-\n-});\n"
                },
                {
                    "date": 1691635507652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n describe('AccountsReadyToBuy', () => {\n   \n   let service: AccountsReadyToBuy;  \n   let orderService: OrderService;\n+  let orderRepository: \n \n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       imports: [\n@@ -31,16 +32,23 @@\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n     orderService = module.get<OrderService>(OrderService);    \n \n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n   });\n \n   it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n \n   it('get orders', async () => {\n+\n+\n+\n     const orders = await service.get(0.001, 0.0001);\n-    console.log(orders);\n+    \n   });\n \n });\n"
                },
                {
                    "date": 1691635528880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n describe('AccountsReadyToBuy', () => {\n   \n   let service: AccountsReadyToBuy;  \n   let orderService: OrderService;\n-  let orderRepository: \n+  let orderRepository: RepRepository<Order>;\n \n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       imports: [\n"
                },
                {
                    "date": 1691635576279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+  });\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+\n+\n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635677700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository, getConnection } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    \n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+\n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635883490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    \n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635894452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    \n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635910811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order]),\n+        TypeOrmModule.forFeature([Balance, Order]),\n+        OrderModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    \n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635923158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { Repository } from 'typeorm';\n import { OrderModule } from '../order/order.module';\n import { Order } from '../order/entities/order.entity';\n import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n \n describe('AccountsReadyToBuy', () => {\n   \n   let service: AccountsReadyToBuy;  \n@@ -22,10 +23,10 @@\n       imports: [\n         ConfigModule.forRoot({\n           envFilePath: '.test.env',\n         }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n         OrderModule\n       ],\n       providers: [\n         AccountsReadyToBuy,       \n@@ -57,289 +58,4 @@\n     \n   });\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    \n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    \n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    \n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-\n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-\n-\n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository, getConnection } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: RepRepository<Order>;\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order]),\n-        TypeOrmModule.forFeature([Balance, Order]),\n-        OrderModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-  });\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-\n-\n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n"
                },
                {
                    "date": 1691635935240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { OrderModule } from '../order/order.module';\n import { Order } from '../order/entities/order.entity';\n import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n \n describe('AccountsReadyToBuy', () => {\n   \n   let service: AccountsReadyToBuy;  \n@@ -25,9 +26,10 @@\n           envFilePath: '.test.env',\n         }),\n         TypeORMMySqlTestingModule([Balance, Order, Pair]),\n         TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule\n+        OrderModule,\n+        ExchangeModule\n       ],\n       providers: [\n         AccountsReadyToBuy,       \n       ],\n"
                },
                {
                    "date": 1691635949477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+    \n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+});\n"
                },
                {
                    "date": 1691635967312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+    \n+\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+  async prepareDB() {\n+\n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+    \n+  }\n+\n+});\n"
                },
                {
                    "date": 1691635988835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+    \n+\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+  async prepareDB() {\n+\n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+    \n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636052849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+  \n+  let service: AccountsReadyToBuy;  \n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+  \n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,       \n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);    \n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+    \n+\n+  });\n+\n+  \n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+    \n+  });\n+\n+  const prepareDB = async function () {\n+\n+    const tableName = orderRepository.metadata.tableName;    \n+    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+    \n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636100849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+\n+    const orders = await service.get(0.001, 0.0001);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636137151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+\n+    const orders = await service.get(0.001, 0.0001);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    \n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636146836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,425 +68,11 @@\n       await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n     }\n     {\n       // Truncate pairs\n-      const tableName = orderRepository.metadata.tableName;\n+      const tableName = pairRepository.metadata.tableName;\n       await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n     }\n-    \n-  }\n \n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-\n-    const orders = await service.get(0.001, 0.0001);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-    \n-\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-  const prepareDB = async function () {\n-\n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-    \n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-    \n-\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-  async prepareDB() {\n-\n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-    \n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-    \n-\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-  async prepareDB() {\n-\n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-    \n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-    \n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-  \n-  let service: AccountsReadyToBuy;  \n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-  \n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,       \n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);    \n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    \n-    const tableName = orderRepository.metadata.tableName;    \n-    await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-  });\n-\n-  \n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-    \n-  });\n-\n-});\n"
                },
                {
                    "date": 1691636154819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     orderService = module.get<OrderService>(OrderService);\n     orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n     pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n \n-\n+    await prepareDB();\n   });\n \n \n \n"
                },
                {
                    "date": 1691636163900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n   });\n \n   it('get orders', async () => {\n \n-\n     const orders = await service.get(0.001, 0.0001);\n+    \n \n   });\n \n   const prepareDB = async function () {\n"
                },
                {
                    "date": 1691636311086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    \n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636854621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const pair = await PairService.fetchOrCreatePair();\n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636890193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n describe('AccountsReadyToBuy', () => {\n \n   let service: AccountsReadyToBuy;\n   let orderService: OrderService;\n+  let pairService: PairService;\n   let orderRepository: Repository<Order>;\n   let pairRepository: Repository<Pair>;\n \n \n@@ -77,161 +78,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    \n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const orders = await service.get(0.001, 0.0001);\n-    \n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691636912046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<OrderService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const pair = await PairService.fetchOrCreatePair();\n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691636923474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     }).compile();\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n     orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<OrderService>(PairService);\n+    pairService = module.get<PairService>(PairService);\n     orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n     pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n \n     await prepareDB();\n@@ -79,85 +79,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const pair = await PairService.fetchOrCreatePair();\n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691636967034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691637006460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: bid,\n+      sellRate: ask,\n+      minAmount1: checkLimits(minAmount, minCost, ask),\n+      minAmount2: minCost,\n+    });\n+\n+\n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691637027315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 31000,\n+      sellRate: 29000,\n+      minAmount1: 0.01,\n+      minAmount2: minCost,\n+    });\n+\n+\n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691637042286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 31000,\n+      sellRate: 29000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+\n+    const orders = await service.get(0.001, 0.0001);\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691639557913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n \n     const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n     pairService.setInfo(pair, {\n       lastPrice: 30000,\n-      buyRate: 31000,\n-      sellRate: 29000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n       minAmount1: 0.01,\n       minAmount2: 10,\n     });\n \n@@ -91,359 +91,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 31000,\n-      sellRate: 29000,\n-      minAmount1: 0.01,\n-      minAmount2: minCost,\n-    });\n-\n-\n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: bid,\n-      sellRate: ask,\n-      minAmount1: checkLimits(minAmount, minCost, ask),\n-      minAmount2: minCost,\n-    });\n-\n-\n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const pair = await PairService.fetchOrCreatePair();\n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691639622617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,12 +65,11 @@\n       minAmount1: 0.01,\n       minAmount2: 10,\n     });\n \n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n \n-    const orders = await service.get(0.001, 0.0001);\n-\n-\n   });\n \n   const prepareDB = async function () {\n \n"
                },
                {
                    "date": 1691639733439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await this.orderRepository\n+    .createQueryBuilder()\n+    .delete()\n+    .from(Order)\n+    .execute();\n+\n+      const tableName = orderRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691639742120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await this.orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+    {\n+      // Truncate pairs\n+      const tableName = pairRepository.metadata.tableName;\n+      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691639755965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await this.orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await this.pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691640617277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691646162045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,17 @@\n import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n import { Pair } from '../exchange/entities/pair.entity';\n import { ExchangeModule } from '../exchange/exchange.module';\n import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n \n describe('AccountsReadyToBuy', () => {\n \n   let service: AccountsReadyToBuy;\n   let orderService: OrderService;\n   let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n   let orderRepository: Repository<Order>;\n   let pairRepository: Repository<Pair>;\n \n \n@@ -39,8 +42,9 @@\n \n     service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n     orderService = module.get<OrderService>(OrderService);\n     pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n     orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n     pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n \n     await prepareDB();\n@@ -65,8 +69,15 @@\n       minAmount1: 0.01,\n       minAmount2: 10,\n     });\n \n+    balance.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n     const accounts = await service.get(0.001, 0.0001);\n     console.log(accounts);\n \n   });\n@@ -97,392 +108,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await this.orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await this.pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await this.orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await this.orderRepository\n-    .createQueryBuilder()\n-    .delete()\n-    .from(Order)\n-    .execute();\n-\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      const tableName = orderRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-    {\n-      // Truncate pairs\n-      const tableName = pairRepository.metadata.tableName;\n-      await orderRepository.query(`TRUNCATE TABLE \"${tableName}\" RESTART IDENTITY;`);\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691646177407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    \n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691646224240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691646262903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import { Pair } from '../exchange/entities/pair.entity';\n import { ExchangeModule } from '../exchange/exchange.module';\n import { PairService } from '../exchange/pair.service';\n import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n \n describe('AccountsReadyToBuy', () => {\n \n   let service: AccountsReadyToBuy;\n@@ -32,9 +33,10 @@\n         }),\n         TypeORMMySqlTestingModule([Balance, Order, Pair]),\n         TypeOrmModule.forFeature([Balance, Order, Pair]),\n         OrderModule,\n-        ExchangeModule\n+        ExchangeModule,\n+        BalanceModule\n       ],\n       providers: [\n         AccountsReadyToBuy,\n       ],\n@@ -110,227 +112,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    \n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    balance.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691646302743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,10 @@\n         'USDT': balanceUSDT\n       });\n \n \n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n+    // const accounts = await service.get(0.001, 0.0001);\n+    // console.log(accounts);\n \n   });\n \n   const prepareDB = async function () {\n"
                },
                {
                    "date": 1691646323651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691646947708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     balanceService = module.get<BalanceService>(BalanceService);\n     orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n     pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n \n-    await prepareDB();\n+    // await prepareDB();\n   });\n \n \n \n@@ -112,119 +112,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    // const accounts = await service.get(0.001, 0.0001);\n-    // console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691646970595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    // await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691647113158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     const accountId = 1;\n     const balanceUSDT = 1000;\n \n     const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n+    await pairService.setInfo(pair, {\n       lastPrice: 30000,\n       buyRate: 29000,\n       sellRate: 31000,\n       minAmount1: 0.01,\n@@ -112,119 +112,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    // await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691647121710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: 31000,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    console.log(accounts);\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691647198957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { ExchangeModule } from '../exchange/exchange.module';\n import { PairService } from '../exchange/pair.service';\n import { BalanceService } from '../balance/balance.service';\n import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n \n describe('AccountsReadyToBuy', () => {\n \n   let service: AccountsReadyToBuy;\n@@ -63,14 +64,15 @@\n     const currency1 = 'BTC';\n     const currency2 = 'USDT';\n     const accountId = 1;\n     const balanceUSDT = 1000;\n+    const sellRate = 31000;\n \n     const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n     await pairService.setInfo(pair, {\n       lastPrice: 30000,\n       buyRate: 29000,\n-      sellRate: 31000,\n+      sellRate: sellRate,\n       minAmount1: 0.01,\n       minAmount2: 10,\n     });\n \n@@ -81,8 +83,10 @@\n       });\n \n \n     const accounts = await service.get(0.001, 0.0001);\n+    equal(accounts.length, 1);\n+    equal(accounts[0].rate, sellRate);\n     console.log(accounts);\n \n   });\n \n@@ -112,119 +116,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    // await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: 31000,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    console.log(accounts);\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691647366107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \n     const accounts = await service.get(0.001, 0.0001);\n     equal(accounts.length, 1);\n     equal(accounts[0].rate, sellRate);\n-    console.log(accounts);\n+    \n \n   });\n \n   const prepareDB = async function () {\n"
                },
                {
                    "date": 1691647407931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1: 0.01,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.001, 0.0001);\n+    equal(accounts.length, 1);\n+    equal(accounts[0].rate, sellRate);\n+    \n+\n+    await orderService.create({\n+\n+    });\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691647507529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    const accounts = await service.get(0.00001, 0.0001);\n+    equal(accounts.length, 1);\n+    equal(accounts[0].rate, sellRate);\n+    equal(accounts[0].amount1, sellRate);\n+    \n+\n+    await orderService.create({\n+        accountId,\n+        amount1: \n+    });\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691647525624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,246 +123,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    equal(accounts.length, 1);\n-    equal(accounts[0].rate, sellRate);\n-    \n-\n-    await orderService.create({\n-\n-    });\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1: 0.01,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.001, 0.0001);\n-    equal(accounts.length, 1);\n-    equal(accounts[0].rate, sellRate);\n-    \n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691647539266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     \n \n     await orderService.create({\n         accountId,\n-        amount1: \n+        minAmount1\n     });\n \n   });\n \n"
                },
                {
                    "date": 1691647620809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n     const accountId = 1;\n     const balanceUSDT = 1000;\n     const sellRate = 31000;\n     const minAmount1 = 0.01;\n+    \n \n     const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n     await pairService.setInfo(pair, {\n       lastPrice: 30000,\n@@ -86,14 +87,20 @@\n \n     const accounts = await service.get(0.00001, 0.0001);\n     equal(accounts.length, 1);\n     equal(accounts[0].rate, sellRate);\n-    equal(accounts[0].amount1, sellRate);\n+    equal(accounts[0].amount1, minAmount1);\n     \n \n     await orderService.create({\n         accountId,\n-        minAmount1\n+        amount1: 0.01,\n+        amount2: 10,\n+        currency1,\n+        currency2,\n+        expectedRate:sellRate,\n+        rate: sellRate\n+\n     });\n \n   });\n \n"
                },
                {
                    "date": 1691647633487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,10 @@\n         amount2: 10,\n         currency1,\n         currency2,\n         expectedRate:sellRate,\n-        rate: sellRate\n+        rate: sellRate,\n+        extOrderId:\"1\"\n \n     });\n \n   });\n"
                },
                {
                    "date": 1691647665545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      \n+    }\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691647788635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal()\n+    }\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691647798211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n     });\n \n     {\n       const accounts = await service.get(0.00001, 0.0001);\n-      equal()\n+      equal(accounts.length, 0);\n     }\n \n \n   });\n@@ -137,278 +137,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-    const minAmount1 = 0.01;\n-\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 1);\n-      equal(accounts[0].rate, sellRate);\n-      equal(accounts[0].amount1, minAmount1);\n-    }\n-\n-    await orderService.create({\n-      accountId,\n-      amount1: 0.01,\n-      amount2: 10,\n-      currency1,\n-      currency2,\n-      expectedRate: sellRate,\n-      rate: sellRate,\n-      extOrderId: \"1\"\n-    });\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      \n-    }\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-    const minAmount1 = 0.01;\n-    \n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    const accounts = await service.get(0.00001, 0.0001);\n-    equal(accounts.length, 1);\n-    equal(accounts[0].rate, sellRate);\n-    equal(accounts[0].amount1, minAmount1);\n-    \n-\n-    await orderService.create({\n-        accountId,\n-        amount1: 0.01,\n-        amount2: 10,\n-        currency1,\n-        currency2,\n-        expectedRate:sellRate,\n-        rate: sellRate,\n-        extOrderId:\"1\"\n-\n-    });\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691648309085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    \n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 0);\n+    }\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691648337520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 0);\n+    }\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691648373832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,48 +68,9 @@\n     const sellRate = 31000;\n     const minAmount1 = 0.01;\n \n \n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1,\n-      minAmount2: 10,\n-    });\n \n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 1);\n-      equal(accounts[0].rate, sellRate);\n-      equal(accounts[0].amount1, minAmount1);\n-    }\n-\n-    await orderService.create({\n-      accountId,\n-      amount1: 0.01,\n-      amount2: 10,\n-      currency1,\n-      currency2,\n-      expectedRate: sellRate,\n-      rate: sellRate,\n-      extOrderId: \"1\"\n-    });\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 0);\n-    }\n-\n-\n   });\n \n   const prepareDB = async function () {\n \n@@ -137,284 +98,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    \n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-    const minAmount1 = 0.01;\n-\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 1);\n-      equal(accounts[0].rate, sellRate);\n-      equal(accounts[0].amount1, minAmount1);\n-    }\n-\n-    await orderService.create({\n-      accountId,\n-      amount1: 0.01,\n-      amount2: 10,\n-      currency1,\n-      currency2,\n-      expectedRate: sellRate,\n-      rate: sellRate,\n-      extOrderId: \"1\"\n-    });\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 0);\n-    }\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-    const minAmount1 = 0.01;\n-\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 1);\n-      equal(accounts[0].rate, sellRate);\n-      equal(accounts[0].amount1, minAmount1);\n-    }\n-\n-    await orderService.create({\n-      accountId,\n-      amount1: 0.01,\n-      amount2: 10,\n-      currency1,\n-      currency2,\n-      expectedRate: sellRate,\n-      rate: sellRate,\n-      extOrderId: \"1\"\n-    });\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 0);\n-    }\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691648394980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 0);\n+    }\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691648472295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+\n+describe('AccountsReadyToBuy', () => {\n+\n+  let service: AccountsReadyToBuy;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: 25000,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+    }\n+\n+\n+    \n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 0);\n+    }\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691650887435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,25 @@\n       minAmount1,\n       minAmount2: 10,\n     });\n \n+    \n     await balanceService.set(\n       accountId,\n       {\n+        'USDT': 5\n+      });\n+\n+\n+      {\n+        const accounts = await service.get(0.00001, 0.0001);\n+        equal(accounts.length, 0);\n+      }\n+\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n         'USDT': balanceUSDT\n       });\n \n \n@@ -155,245 +169,4 @@\n \n   }\n \n });\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-    const minAmount1 = 0.01;\n-\n-\n-    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n-    await pairService.setInfo(pair, {\n-      lastPrice: 30000,\n-      buyRate: 29000,\n-      sellRate: sellRate,\n-      minAmount1,\n-      minAmount2: 10,\n-    });\n-\n-    await balanceService.set(\n-      accountId,\n-      {\n-        'USDT': balanceUSDT\n-      });\n-\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 1);\n-      equal(accounts[0].rate, sellRate);\n-      equal(accounts[0].amount1, minAmount1);\n-    }\n-\n-    await orderService.create({\n-      accountId,\n-      amount1: 0.01,\n-      amount2: 10,\n-      currency1,\n-      currency2,\n-      expectedRate: sellRate,\n-      rate: sellRate,\n-      extOrderId: \"1\"\n-    });\n-\n-    {\n-      const accounts = await service.get(0.00001, 0.0001);\n-      equal(accounts.length, 0);\n-    }\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n-import { Test, TestingModule } from '@nestjs/testing';\n-import { OrderService } from '../order/order.service';\n-import { ConfigModule } from '@nestjs/config';\n-import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n-import { Balance } from '../balance/entities/balance.entity';\n-import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n-import { Repository } from 'typeorm';\n-import { OrderModule } from '../order/order.module';\n-import { Order } from '../order/entities/order.entity';\n-import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n-import { Pair } from '../exchange/entities/pair.entity';\n-import { ExchangeModule } from '../exchange/exchange.module';\n-import { PairService } from '../exchange/pair.service';\n-import { BalanceService } from '../balance/balance.service';\n-import { BalanceModule } from '../balance/balance.module';\n-import { equal } from 'assert';\n-\n-describe('AccountsReadyToBuy', () => {\n-\n-  let service: AccountsReadyToBuy;\n-  let orderService: OrderService;\n-  let pairService: PairService;\n-  let balanceService: BalanceService;\n-\n-  let orderRepository: Repository<Order>;\n-  let pairRepository: Repository<Pair>;\n-\n-\n-  beforeEach(async () => {\n-    const module: TestingModule = await Test.createTestingModule({\n-      imports: [\n-        ConfigModule.forRoot({\n-          envFilePath: '.test.env',\n-        }),\n-        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n-        TypeOrmModule.forFeature([Balance, Order, Pair]),\n-        OrderModule,\n-        ExchangeModule,\n-        BalanceModule\n-      ],\n-      providers: [\n-        AccountsReadyToBuy,\n-      ],\n-    }).compile();\n-\n-    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n-    orderService = module.get<OrderService>(OrderService);\n-    pairService = module.get<PairService>(PairService);\n-    balanceService = module.get<BalanceService>(BalanceService);\n-    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n-    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n-\n-    await prepareDB();\n-  });\n-\n-\n-\n-  it('should be defined', () => {\n-    expect(service).toBeDefined();\n-  });\n-\n-  it('get orders', async () => {\n-\n-    const currency1 = 'BTC';\n-    const currency2 = 'USDT';\n-    const accountId = 1;\n-    const balanceUSDT = 1000;\n-    const sellRate = 31000;\n-    const minAmount1 = 0.01;\n-\n-\n-\n-  });\n-\n-  const prepareDB = async function () {\n-\n-    if (process.env.BOT_TEST != 'true') {\n-      throw new Error('Cant run in prod, you loss all data!!!');\n-    }\n-\n-    {\n-      // Truncate orders\n-      await orderRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Order)\n-        .execute();\n-    }\n-\n-    {\n-      // Truncate pairs\n-      await pairRepository\n-        .createQueryBuilder()\n-        .delete()\n-        .from(Pair)\n-        .execute();\n-    }\n-\n-  }\n-\n-});\n"
                },
                {
                    "date": 1691650935537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n         'USDT': 5\n       });\n \n \n+      // Без баланса ничего не выйдет\n       {\n         const accounts = await service.get(0.00001, 0.0001);\n         equal(accounts.length, 0);\n       }\n@@ -96,10 +97,9 @@\n       accountId,\n       {\n         'USDT': balanceUSDT\n       });\n-\n-\n+      // Баланс есть, оредров нет\n     {\n       const accounts = await service.get(0.00001, 0.0001);\n       equal(accounts.length, 1);\n       equal(accounts[0].rate, sellRate);\n@@ -115,9 +115,9 @@\n       expectedRate: sellRate,\n       rate: 25000,\n       extOrderId: \"1\"\n     });\n-\n+    // Есть ордер, но в другой рэйт\n     {\n       const accounts = await service.get(0.00001, 0.0001);\n       equal(accounts.length, 1);\n     }\n@@ -133,9 +133,9 @@\n       expectedRate: sellRate,\n       rate: sellRate,\n       extOrderId: \"1\"\n     });\n-\n+    // Есть ордер и в наш рейт\n     {\n       const accounts = await service.get(0.00001, 0.0001);\n       equal(accounts.length, 0);\n     }\n"
                },
                {
                    "date": 1691651017128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,8 @@\n     {\n       const accounts = await service.get(0.00001, 0.0001);\n       equal(accounts.length, 1);\n     }\n-\n-\n     \n     await orderService.create({\n       accountId,\n       amount1: 0.01,\n"
                }
            ],
            "date": 1691633172469,
            "name": "Commit-0",
            "content": "import { Test, TestingModule } from '@nestjs/testing';\nimport { MockedExchange } from '../exchange/mock/mocked.exchange';\nimport { AccountService } from '../exchange/account.service';\nimport { PublicApiService } from '../exchange/publicApi.service';\nimport { ApiService } from '../exchange/api.service';\nimport { FileLogService } from '../log/filelog.service';\nimport { SilentLogService } from '../log/silentlog.service';\nimport { BalanceService } from '../balance/balance.service';\nimport { TestBalanceService } from '../balance/mock/testbalance.service';\nimport { OrderService } from '../order/order.service';\nimport { TestOrderService } from '../order/mock/testorder.service';\nimport { equal } from 'assert';\nimport { ConfigModule } from '@nestjs/config';\n\ndescribe('LonelyTraderService', () => {\n  let trader: LonelyTraderService;\n  let orders: OrderService;\n  let testOrderRepository = {\n    create: (data) => {\n      console.log('CREATE', data);\n    }\n  }\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          envFilePath: '.test.env',\n        }),\n      ],\n      providers: [\n        BotService,\n        MockedExchange,\n        AccountService,\n        LonelyTraderService,\n        {\n          provide: PublicApiService,\n          useValue: new ApiService(MockedExchange),\n        },\n        {\n          provide: FileLogService,\n          useClass: SilentLogService,\n        },\n        {\n          provide: BalanceService,\n          useClass: TestBalanceService,\n        },\n        {\n          provide: OrderService,\n          useClass: TestOrderService,\n        },\n      ],\n    }).compile();\n\n    trader = module.get<LonelyTraderService>(LonelyTraderService);\n    orders = module.get<OrderService>(OrderService);\n  });\n\n  it('should be defined', () => {\n    expect(trader).toBeDefined();\n  });\n\n  it('should rate to be occupied', async () => {\n    orders.create({\n      accountId: 1,\n      amount1: 0.1,\n      amount2: 1,\n      rate: 10,\n      extOrderId: String(1),\n      expectedRate: 1,\n      currency1: \"BTC\",\n      currency2: \"BUSD\"\n    });\n\n    orders.create({\n      accountId: 1,\n      amount1: 0.1,\n      amount2: 1,\n      rate: 5,\n      extOrderId: String(1),\n      expectedRate: 1,\n      currency1: \"BTC\",\n      currency2: \"BUSD\"\n    });\n\n\n    const activeOrders = await trader.loadActiveOrders();\n\n    {\n      const isRateOccupied = trader.isRateOccupied(10, activeOrders, 0.1);\n      equal(isRateOccupied, true);\n    }\n\n    {\n      const isRateOccupied = trader.isRateOccupied(7, activeOrders, 0.1);\n      equal(isRateOccupied, false);\n    }\n\n    {\n      const isRateOccupied = trader.isRateOccupied(5.3, activeOrders, 0.1);\n      equal(isRateOccupied, true);\n    }\n  });\n});\n"
        }
    ]
}