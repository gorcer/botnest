{
    "sourceFile": "src/analitics/activeOrdersAboveProfit.service.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1691651061902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691651075957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+import { ActiveOrdersAboveProfit } from './activeOrdersAboveProfit.service';\n+\n+describe('ActiveOrdersAboveProfit', () => {\n+\n+  let service: ActiveOrdersAboveProfit;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<ActiveOrdersAboveProfit>(ActiveOrdersAboveProfit);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    \n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': 5\n+      });\n+\n+\n+      // Без баланса ничего не выйдет\n+      {\n+        const accounts = await service.get(0.00001, 0.0001);\n+        equal(accounts.length, 0);\n+      }\n+\n+\n+    await balanceService.set(\n+      accountId,\n+      {\n+        'USDT': balanceUSDT\n+      });\n+      // Баланс есть, оредров нет\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+      equal(accounts[0].rate, sellRate);\n+      equal(accounts[0].amount1, minAmount1);\n+    }\n+\n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: 25000,\n+      extOrderId: \"1\"\n+    });\n+    // Есть ордер, но в другой рэйт\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 1);\n+    }\n+    \n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: sellRate,\n+      extOrderId: \"1\"\n+    });\n+    // Есть ордер и в наш рейт\n+    {\n+      const accounts = await service.get(0.00001, 0.0001);\n+      equal(accounts.length, 0);\n+    }\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                },
                {
                    "date": 1691651482908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { OrderService } from '../order/order.service';\n+import { ConfigModule } from '@nestjs/config';\n+import { AccountsReadyToBuy } from './accountsReadyToBuy.service';\n+import { Balance } from '../balance/entities/balance.entity';\n+import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrderModule } from '../order/order.module';\n+import { Order } from '../order/entities/order.entity';\n+import { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\n+import { Pair } from '../exchange/entities/pair.entity';\n+import { ExchangeModule } from '../exchange/exchange.module';\n+import { PairService } from '../exchange/pair.service';\n+import { BalanceService } from '../balance/balance.service';\n+import { BalanceModule } from '../balance/balance.module';\n+import { equal } from 'assert';\n+import { ActiveOrdersAboveProfit } from './activeOrdersAboveProfit.service';\n+\n+describe('ActiveOrdersAboveProfit', () => {\n+\n+  let service: ActiveOrdersAboveProfit;\n+  let orderService: OrderService;\n+  let pairService: PairService;\n+  let balanceService: BalanceService;\n+\n+  let orderRepository: Repository<Order>;\n+  let pairRepository: Repository<Pair>;\n+\n+\n+  beforeEach(async () => {\n+    const module: TestingModule = await Test.createTestingModule({\n+      imports: [\n+        ConfigModule.forRoot({\n+          envFilePath: '.test.env',\n+        }),\n+        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n+        TypeOrmModule.forFeature([Balance, Order, Pair]),\n+        OrderModule,\n+        ExchangeModule,\n+        BalanceModule\n+      ],\n+      providers: [\n+        AccountsReadyToBuy,\n+      ],\n+    }).compile();\n+\n+    service = module.get<ActiveOrdersAboveProfit>(ActiveOrdersAboveProfit);\n+    orderService = module.get<OrderService>(OrderService);\n+    pairService = module.get<PairService>(PairService);\n+    balanceService = module.get<BalanceService>(BalanceService);\n+    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n+    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n+\n+    await prepareDB();\n+  });\n+\n+\n+\n+  it('should be defined', () => {\n+    expect(service).toBeDefined();\n+  });\n+\n+  it('get orders', async () => {\n+\n+    const currency1 = 'BTC';\n+    const currency2 = 'USDT';\n+    const accountId = 1;\n+    const balanceUSDT = 1000;\n+    const sellRate = 31000;\n+    const minAmount1 = 0.01;\n+\n+\n+    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n+    await pairService.setInfo(pair, {\n+      lastPrice: 30000,\n+      buyRate: 29000,\n+      sellRate: sellRate,\n+      minAmount1,\n+      minAmount2: 10,\n+    });\n+\n+    \n+      \n+      {\n+        \n+    await orderService.create({\n+      accountId,\n+      amount1: 0.01,\n+      amount2: 10,\n+      currency1,\n+      currency2,\n+      expectedRate: sellRate,\n+      rate: 25000,\n+      extOrderId: \"1\"\n+    });\n+        const orders = await service.get(30, 300);\n+        \n+      }\n+\n+\n+\n+  });\n+\n+  const prepareDB = async function () {\n+\n+    if (process.env.BOT_TEST != 'true') {\n+      throw new Error('Cant run in prod, you loss all data!!!');\n+    }\n+\n+    {\n+      // Truncate orders\n+      await orderRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Order)\n+        .execute();\n+    }\n+\n+    {\n+      // Truncate pairs\n+      await pairRepository\n+        .createQueryBuilder()\n+        .delete()\n+        .from(Pair)\n+        .execute();\n+    }\n+\n+  }\n+\n+});\n"
                }
            ],
            "date": 1691651061902,
            "name": "Commit-0",
            "content": "import { Test, TestingModule } from '@nestjs/testing';\nimport { OrderService } from '../order/order.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { AccountsReadyToBuy } from './accountsReadyToBuy.service';\nimport { Balance } from '../balance/entities/balance.entity';\nimport { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { OrderModule } from '../order/order.module';\nimport { Order } from '../order/entities/order.entity';\nimport { TypeORMMySqlTestingModule } from '../test-utils/TypeORMMySqlTestingModule';\nimport { Pair } from '../exchange/entities/pair.entity';\nimport { ExchangeModule } from '../exchange/exchange.module';\nimport { PairService } from '../exchange/pair.service';\nimport { BalanceService } from '../balance/balance.service';\nimport { BalanceModule } from '../balance/balance.module';\nimport { equal } from 'assert';\n\ndescribe('ActiveOrdersAboveProfit', () => {\n\n  let service: AccountsReadyToBuy;\n  let orderService: OrderService;\n  let pairService: PairService;\n  let balanceService: BalanceService;\n\n  let orderRepository: Repository<Order>;\n  let pairRepository: Repository<Pair>;\n\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          envFilePath: '.test.env',\n        }),\n        TypeORMMySqlTestingModule([Balance, Order, Pair]),\n        TypeOrmModule.forFeature([Balance, Order, Pair]),\n        OrderModule,\n        ExchangeModule,\n        BalanceModule\n      ],\n      providers: [\n        AccountsReadyToBuy,\n      ],\n    }).compile();\n\n    service = module.get<AccountsReadyToBuy>(AccountsReadyToBuy);\n    orderService = module.get<OrderService>(OrderService);\n    pairService = module.get<PairService>(PairService);\n    balanceService = module.get<BalanceService>(BalanceService);\n    orderRepository = module.get<Repository<Order>>(getRepositoryToken(Order));\n    pairRepository = module.get<Repository<Pair>>(getRepositoryToken(Pair));\n\n    await prepareDB();\n  });\n\n\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('get orders', async () => {\n\n    const currency1 = 'BTC';\n    const currency2 = 'USDT';\n    const accountId = 1;\n    const balanceUSDT = 1000;\n    const sellRate = 31000;\n    const minAmount1 = 0.01;\n\n\n    const pair = await pairService.fetchOrCreatePair(currency1, currency2);\n    await pairService.setInfo(pair, {\n      lastPrice: 30000,\n      buyRate: 29000,\n      sellRate: sellRate,\n      minAmount1,\n      minAmount2: 10,\n    });\n\n    \n    await balanceService.set(\n      accountId,\n      {\n        'USDT': 5\n      });\n\n\n      // Без баланса ничего не выйдет\n      {\n        const accounts = await service.get(0.00001, 0.0001);\n        equal(accounts.length, 0);\n      }\n\n\n    await balanceService.set(\n      accountId,\n      {\n        'USDT': balanceUSDT\n      });\n      // Баланс есть, оредров нет\n    {\n      const accounts = await service.get(0.00001, 0.0001);\n      equal(accounts.length, 1);\n      equal(accounts[0].rate, sellRate);\n      equal(accounts[0].amount1, minAmount1);\n    }\n\n    await orderService.create({\n      accountId,\n      amount1: 0.01,\n      amount2: 10,\n      currency1,\n      currency2,\n      expectedRate: sellRate,\n      rate: 25000,\n      extOrderId: \"1\"\n    });\n    // Есть ордер, но в другой рэйт\n    {\n      const accounts = await service.get(0.00001, 0.0001);\n      equal(accounts.length, 1);\n    }\n    \n    await orderService.create({\n      accountId,\n      amount1: 0.01,\n      amount2: 10,\n      currency1,\n      currency2,\n      expectedRate: sellRate,\n      rate: sellRate,\n      extOrderId: \"1\"\n    });\n    // Есть ордер и в наш рейт\n    {\n      const accounts = await service.get(0.00001, 0.0001);\n      equal(accounts.length, 0);\n    }\n\n  });\n\n  const prepareDB = async function () {\n\n    if (process.env.BOT_TEST != 'true') {\n      throw new Error('Cant run in prod, you loss all data!!!');\n    }\n\n    {\n      // Truncate orders\n      await orderRepository\n        .createQueryBuilder()\n        .delete()\n        .from(Order)\n        .execute();\n    }\n\n    {\n      // Truncate pairs\n      await pairRepository\n        .createQueryBuilder()\n        .delete()\n        .from(Pair)\n        .execute();\n    }\n\n  }\n\n});\n"
        }
    ]
}