{
    "sourceFile": "src/balance/balance.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1691540820709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691540949335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import { Injectable } from \"@nestjs/common\";\n+import { BalancesDto } from \"./dto/balances.dto\";\n+import { InjectRepository } from \"@nestjs/typeorm\";\n+import { Balance } from \"./entities/balance.entity\";\n+import { Repository } from \"typeorm\";\n+import { lock } from \"../helpers\";\n+import { FileLogService } from \"../log/filelog.service\";\n+import { BalanceLog } from \"./entities/balanceLog.entity\";\n+const { compareTo } = require(\"js-big-decimal\");\n+\n+const { multiply, add } = require(\"js-big-decimal\");\n+\n+@Injectable()\n+export class BalanceService {\n+\n+    balances: {\n+        (account_id: number): BalancesDto\n+    } | {} = {};\n+\n+    constructor(\n+        @InjectRepository(Balance)\n+        private balanceRepository: Repository<Balance>,\n+        private balanceLogRepository: Repository<BalanceLog>,\n+        private log: FileLogService,\n+\n+    ) { }\n+\n+    public async set(accountId: number, balances: BalancesDto) {\n+\n+        return await lock.acquire('Balance', async () => {\n+            this.balances[accountId] = balances;\n+\n+            for (const [currency, amount] of Object.entries(balances)) {\n+                let balance: Balance = await this.balanceRepository.findOneBy({\n+                    accountId,\n+                    currency,\n+                });\n+                if (!balance) {\n+                    if (compareTo(amount, 0) > 0) {\n+                        balance = this.balanceRepository.create({\n+                            accountId,\n+                            currency,\n+                            amount: amount\n+                        });\n+                    }\n+                } else {\n+\n+                    if (compareTo(balance.amount, amount) != 0) {\n+                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+\n+                        this.balanceLogRepository.save(\n+                            this.balanceLogRepository.create({\n+                                accountId: balance.accountId,\n+                                balanceId: balance.id\n+                            });\n+                        );\n+                    }\n+                    balance.amount = amount;\n+                }\n+\n+                if (balance)\n+                    await this.balanceRepository.save(balance);\n+            }\n+        });\n+\n+    }\n+\n+    public async loadBalancesAmount(accountId: number) {\n+        const balances = await this.balanceRepository.find();\n+        for (const balance of balances) {\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][balance.currency] = balance.amount;\n+        }\n+    }\n+\n+    public async getBalanceAmount(accountId: number, currency: string) {\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            return this.balances[accountId][currency];\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            currency,\n+        });\n+        if (balance) {\n+\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][currency] = balance.amount;\n+            return balance.amount;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    private async checkBalances(accountId) {\n+        if (!this.balances[accountId])  {\n+            this.loadBalancesAmount(accountId);\n+        }\n+\n+    }\n+\n+\n+    public async income(accountId: number, currency: string, amount: number) {\n+\n+        this.checkBalances(accountId);\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            accountId,\n+            currency,\n+        });\n+        if (balance) {\n+            balance.amount = add(balance.amount, amount);\n+        }\n+        await this.balanceRepository.save(balance);\n+\n+\n+\n+\n+\n+        return balance;\n+    }\n+\n+    public async outcome(accountId: number, currency: string, amount: number) {\n+        return this.income(accountId, currency, multiply(-1, amount));\n+    }\n+\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541042750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Balance } from \"./entities/balance.entity\";\n import { Repository } from \"typeorm\";\n import { lock } from \"../helpers\";\n import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog } from \"./entities/balanceLog.entity\";\n+import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n const { compareTo } = require(\"js-big-decimal\");\n \n const { multiply, add } = require(\"js-big-decimal\");\n \n@@ -28,8 +28,9 @@\n     public async set(accountId: number, balances: BalancesDto) {\n \n         return await lock.acquire('Balance', async () => {\n             this.balances[accountId] = balances;\n+            let operationType:OperationType;\n \n             for (const [currency, amount] of Object.entries(balances)) {\n                 let balance: Balance = await this.balanceRepository.findOneBy({\n                     accountId,\n@@ -41,9 +42,11 @@\n                             accountId,\n                             currency,\n                             amount: amount\n                         });\n-                    }\n+                        operationType = OperationType.INIT;\n+                        \n+\n                 } else {\n \n                     if (compareTo(balance.amount, amount) != 0) {\n                         this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n@@ -57,139 +60,12 @@\n                     }\n                     balance.amount = amount;\n                 }\n \n-                if (balance)\n+                if (balance) {\n                     await this.balanceRepository.save(balance);\n-            }\n-        });\n \n-    }\n-\n-    public async loadBalancesAmount(accountId: number) {\n-        const balances = await this.balanceRepository.find();\n-        for (const balance of balances) {\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][balance.currency] = balance.amount;\n-        }\n-    }\n-\n-    public async getBalanceAmount(accountId: number, currency: string) {\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            return this.balances[accountId][currency];\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            currency,\n-        });\n-        if (balance) {\n-\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][currency] = balance.amount;\n-            return balance.amount;\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-    private async checkBalances(accountId) {\n-        if (!this.balances[accountId])  {\n-            this.loadBalancesAmount(accountId);\n-        }\n-\n-    }\n-\n-\n-    public async income(accountId: number, currency: string, amount: number) {\n-\n-        this.checkBalances(accountId);\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            accountId,\n-            currency,\n-        });\n-        if (balance) {\n-            balance.amount = add(balance.amount, amount);\n-        }\n-        await this.balanceRepository.save(balance);\n-\n-\n-\n-\n-\n-        return balance;\n-    }\n-\n-    public async outcome(accountId: number, currency: string, amount: number) {\n-        return this.income(accountId, currency, multiply(-1, amount));\n-    }\n-\n-\n-}\n-import { Injectable } from \"@nestjs/common\";\n-import { BalancesDto } from \"./dto/balances.dto\";\n-import { InjectRepository } from \"@nestjs/typeorm\";\n-import { Balance } from \"./entities/balance.entity\";\n-import { Repository } from \"typeorm\";\n-import { lock } from \"../helpers\";\n-import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n-\n-const { multiply, add } = require(\"js-big-decimal\");\n-\n-@Injectable()\n-export class BalanceService {\n-\n-    balances: {\n-        (account_id: number): BalancesDto\n-    } | {} = {};\n-\n-    constructor(\n-        @InjectRepository(Balance)\n-        private balanceRepository: Repository<Balance>,\n-        private balanceLogRepository: Repository<BalanceLog>,\n-        private log: FileLogService,\n-\n-    ) { }\n-\n-    public async set(accountId: number, balances: BalancesDto) {\n-\n-        return await lock.acquire('Balance', async () => {\n-            this.balances[accountId] = balances;\n-\n-            for (const [currency, amount] of Object.entries(balances)) {\n-                let balance: Balance = await this.balanceRepository.findOneBy({\n-                    accountId,\n-                    currency,\n-                });\n-                if (!balance) {\n-                    if (compareTo(amount, 0) > 0) {\n-                        balance = await this.balanceRepository.create({\n-                            accountId,\n-                            currency,\n-                            amount: amount\n-                        });\n-                    }\n-                } else {\n-\n-                    if (compareTo(balance.amount, amount) != 0) {\n-                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                    }\n-                    balance.amount = amount;\n                 }\n-\n-                if (balance)\n-                    await this.balanceRepository.save(balance);\n             }\n         });\n \n     }\n"
                },
                {
                    "date": 1691541064666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,22 +49,22 @@\n                 } else {\n \n                     if (compareTo(balance.amount, amount) != 0) {\n                         this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-\n-                        this.balanceLogRepository.save(\n-                            this.balanceLogRepository.create({\n-                                accountId: balance.accountId,\n-                                balanceId: balance.id\n-                            });\n-                        );\n+                        operationType = OperationType.ACTUALIZE;                        \n                     }\n                     balance.amount = amount;\n                 }\n \n                 if (balance) {\n                     await this.balanceRepository.save(balance);\n \n+                    this.balanceLogRepository.save(\n+                        this.balanceLogRepository.create({\n+                            accountId: balance.accountId,\n+                            balanceId: balance.id\n+                        });\n+                    );\n                 }\n             }\n         });\n \n"
                },
                {
                    "date": 1691541139431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { Injectable } from \"@nestjs/common\";\n+import { BalancesDto } from \"./dto/balances.dto\";\n+import { InjectRepository } from \"@nestjs/typeorm\";\n+import { Balance } from \"./entities/balance.entity\";\n+import { Repository } from \"typeorm\";\n+import { lock } from \"../helpers\";\n+import { FileLogService } from \"../log/filelog.service\";\n+import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n+const { compareTo } = require(\"js-big-decimal\");\n+\n+const { multiply, add } = require(\"js-big-decimal\");\n+\n+@Injectable()\n+export class BalanceService {\n+\n+    balances: {\n+        (account_id: number): BalancesDto\n+    } | {} = {};\n+\n+    constructor(\n+        @InjectRepository(Balance)\n+        private balanceRepository: Repository<Balance>,\n+        private balanceLogRepository: Repository<BalanceLog>,\n+        private log: FileLogService,\n+\n+    ) { }\n+\n+    public async set(accountId: number, balances: BalancesDto) {\n+\n+        return await lock.acquire('Balance', async () => {\n+            this.balances[accountId] = balances;\n+            let operationType: OperationType;\n+            let operationAmount;\n+\n+            for (const [currency, amount] of Object.entries(balances)) {\n+                let balance: Balance = await this.balanceRepository.findOneBy({\n+                    accountId,\n+                    currency,\n+                });\n+                if (!balance) {\n+                    if (compareTo(amount, 0) > 0) {\n+                        balance = this.balanceRepository.create({\n+                            accountId,\n+                            currency,\n+                            amount: amount\n+                        });\n+                        operationType = OperationType.INIT;\n+                        operationAmount = amount;\n+\n+                    } else {\n+\n+                        if (compareTo(balance.amount, amount) != 0) {\n+                            this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+                            operationType = OperationType.ACTUALIZE;\n+                        }\n+                        balance.amount = amount;\n+                    }\n+\n+                    if (balance) {\n+                        await this.balanceRepository.save(balance);\n+\n+                        if (operationType) {\n+                            this.balanceLogRepository.save(\n+                                this.balanceLogRepository.create({\n+                                    accountId: balance.accountId,\n+                                    balanceId: balance.id,\n+                                    operationType,\n+                                    amount: \n+                                });\n+                    );\n+    }\n+}\n+            }\n+        });\n+\n+    }\n+\n+    public async loadBalancesAmount(accountId: number) {\n+    const balances = await this.balanceRepository.find();\n+    for (const balance of balances) {\n+        if (!this.balances[accountId])\n+            this.balances[accountId] = {};\n+\n+        this.balances[accountId][balance.currency] = balance.amount;\n+    }\n+}\n+\n+    public async getBalanceAmount(accountId: number, currency: string) {\n+\n+    if (this.balances[accountId]?.[currency] != undefined) {\n+        return this.balances[accountId][currency];\n+    }\n+\n+    let balance = await this.balanceRepository.findOneBy({\n+        currency,\n+    });\n+    if (balance) {\n+\n+        if (!this.balances[accountId])\n+            this.balances[accountId] = {};\n+\n+        this.balances[accountId][currency] = balance.amount;\n+        return balance.amount;\n+    } else {\n+        return 0;\n+    }\n+}\n+\n+    private async checkBalances(accountId) {\n+    if (!this.balances[accountId]) {\n+        this.loadBalancesAmount(accountId);\n+    }\n+\n+}\n+\n+\n+    public async income(accountId: number, currency: string, amount: number) {\n+\n+    this.checkBalances(accountId);\n+\n+    if (this.balances[accountId]?.[currency] != undefined) {\n+        this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n+    }\n+\n+    let balance = await this.balanceRepository.findOneBy({\n+        accountId,\n+        currency,\n+    });\n+    if (balance) {\n+        balance.amount = add(balance.amount, amount);\n+    }\n+    await this.balanceRepository.save(balance);\n+\n+\n+\n+\n+\n+    return balance;\n+}\n+\n+    public async outcome(accountId: number, currency: string, amount: number) {\n+    return this.income(accountId, currency, multiply(-1, amount));\n+}\n+\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541166963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,146 +142,5 @@\n     return this.income(accountId, currency, multiply(-1, amount));\n }\n \n \n-}\n-import { Injectable } from \"@nestjs/common\";\n-import { BalancesDto } from \"./dto/balances.dto\";\n-import { InjectRepository } from \"@nestjs/typeorm\";\n-import { Balance } from \"./entities/balance.entity\";\n-import { Repository } from \"typeorm\";\n-import { lock } from \"../helpers\";\n-import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n-\n-const { multiply, add } = require(\"js-big-decimal\");\n-\n-@Injectable()\n-export class BalanceService {\n-\n-    balances: {\n-        (account_id: number): BalancesDto\n-    } | {} = {};\n-\n-    constructor(\n-        @InjectRepository(Balance)\n-        private balanceRepository: Repository<Balance>,\n-        private balanceLogRepository: Repository<BalanceLog>,\n-        private log: FileLogService,\n-\n-    ) { }\n-\n-    public async set(accountId: number, balances: BalancesDto) {\n-\n-        return await lock.acquire('Balance', async () => {\n-            this.balances[accountId] = balances;\n-            let operationType:OperationType;\n-\n-            for (const [currency, amount] of Object.entries(balances)) {\n-                let balance: Balance = await this.balanceRepository.findOneBy({\n-                    accountId,\n-                    currency,\n-                });\n-                if (!balance) {\n-                    if (compareTo(amount, 0) > 0) {\n-                        balance = this.balanceRepository.create({\n-                            accountId,\n-                            currency,\n-                            amount: amount\n-                        });\n-                        operationType = OperationType.INIT;\n-                        \n-\n-                } else {\n-\n-                    if (compareTo(balance.amount, amount) != 0) {\n-                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                        operationType = OperationType.ACTUALIZE;                        \n-                    }\n-                    balance.amount = amount;\n-                }\n-\n-                if (balance) {\n-                    await this.balanceRepository.save(balance);\n-\n-                    this.balanceLogRepository.save(\n-                        this.balanceLogRepository.create({\n-                            accountId: balance.accountId,\n-                            balanceId: balance.id\n-                        });\n-                    );\n-                }\n-            }\n-        });\n-\n-    }\n-\n-    public async loadBalancesAmount(accountId: number) {\n-        const balances = await this.balanceRepository.find();\n-        for (const balance of balances) {\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][balance.currency] = balance.amount;\n-        }\n-    }\n-\n-    public async getBalanceAmount(accountId: number, currency: string) {\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            return this.balances[accountId][currency];\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            currency,\n-        });\n-        if (balance) {\n-\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][currency] = balance.amount;\n-            return balance.amount;\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-    private async checkBalances(accountId) {\n-        if (!this.balances[accountId])  {\n-            this.loadBalancesAmount(accountId);\n-        }\n-\n-    }\n-\n-\n-    public async income(accountId: number, currency: string, amount: number) {\n-\n-        this.checkBalances(accountId);\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            accountId,\n-            currency,\n-        });\n-        if (balance) {\n-            balance.amount = add(balance.amount, amount);\n-        }\n-        await this.balanceRepository.save(balance);\n-\n-\n-\n-\n-\n-        return balance;\n-    }\n-\n-    public async outcome(accountId: number, currency: string, amount: number) {\n-        return this.income(accountId, currency, multiply(-1, amount));\n-    }\n-\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541212539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { FileLogService } from \"../log/filelog.service\";\n import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n const { compareTo } = require(\"js-big-decimal\");\n \n-const { multiply, add } = require(\"js-big-decimal\");\n+const { multiply, add, subtract } = require(\"js-big-decimal\");\n \n @Injectable()\n export class BalanceService {\n \n@@ -51,10 +51,12 @@\n \n                         if (compareTo(balance.amount, amount) != 0) {\n                             this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n                             operationType = OperationType.ACTUALIZE;\n+                            operationAmount = amount;\n                         }\n-                        balance.amount = amount;\n+                        balance.amount = subtract(balance.amount, amount);\n+\n                     }\n \n                     if (balance) {\n                         await this.balanceRepository.save(balance);\n"
                },
                {
                    "date": 1691541233153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,11 @@\n                                     accountId: balance.accountId,\n                                     balanceId: balance.id,\n                                     operationType,\n                                     amount: \n-                                });\n+                                })\n+                            );\n+                            \n                     );\n     }\n }\n             }\n"
                },
                {
                    "date": 1691541247031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,10 @@\n                                 this.balanceLogRepository.create({\n                                     accountId: balance.accountId,\n                                     balanceId: balance.id,\n                                     operationType,\n-                                    amount: \n+                                    amount: operationAmount,\n+                                    total: balance.amount\n                                 })\n                             );\n                             \n                     );\n"
                },
                {
                    "date": 1691541297589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import { Injectable } from \"@nestjs/common\";\n+import { BalancesDto } from \"./dto/balances.dto\";\n+import { InjectRepository } from \"@nestjs/typeorm\";\n+import { Balance } from \"./entities/balance.entity\";\n+import { Repository } from \"typeorm\";\n+import { lock } from \"../helpers\";\n+import { FileLogService } from \"../log/filelog.service\";\n+import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n+const { compareTo } = require(\"js-big-decimal\");\n+\n+const { multiply, add, subtract } = require(\"js-big-decimal\");\n+\n+@Injectable()\n+export class BalanceService {\n+\n+    balances: {\n+        (account_id: number): BalancesDto\n+    } | {} = {};\n+\n+    constructor(\n+        @InjectRepository(Balance)\n+        private balanceRepository: Repository<Balance>,\n+        private balanceLogRepository: Repository<BalanceLog>,\n+        private log: FileLogService,\n+\n+    ) { }\n+\n+    public async set(accountId: number, balances: BalancesDto) {\n+\n+        return await lock.acquire('Balance', async () => {\n+            this.balances[accountId] = balances;\n+            let operationType: OperationType;\n+            let operationAmount;\n+\n+            for (const [currency, amount] of Object.entries(balances)) {\n+                let balance: Balance = await this.balanceRepository.findOneBy({\n+                    accountId,\n+                    currency,\n+                });\n+                if (!balance) {\n+                    if (compareTo(amount, 0) > 0) {\n+                        balance = this.balanceRepository.create({\n+                            accountId,\n+                            currency,\n+                            amount: amount\n+                        });\n+                        operationType = OperationType.INIT;\n+                        operationAmount = amount;\n+\n+                    } else {\n+\n+                        if (compareTo(balance.amount, amount) != 0) {\n+                            this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+                            operationType = OperationType.ACTUALIZE;\n+                            operationAmount = amount;\n+                        }\n+                        balance.amount = subtract(balance.amount, amount);\n+\n+                    }\n+\n+                    if (balance) {\n+                        await this.balanceRepository.save(balance);\n+\n+                        if (operationType) {\n+                            this.balanceLogRepository.save(\n+                                this.balanceLogRepository.create({\n+                                    accountId: balance.accountId,\n+                                    balanceId: balance.id,\n+                                    operationType,\n+                                    amount: operationAmount,\n+                                    total: balance.amount\n+                                })\n+                            );\n+\n+\n+                        }\n+                    }\n+                }\n+            });\n+\n+    }\n+\n+    public async loadBalancesAmount(accountId: number) {\n+        const balances = await this.balanceRepository.find();\n+        for (const balance of balances) {\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][balance.currency] = balance.amount;\n+        }\n+    }\n+\n+    public async getBalanceAmount(accountId: number, currency: string) {\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            return this.balances[accountId][currency];\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            currency,\n+        });\n+        if (balance) {\n+\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][currency] = balance.amount;\n+            return balance.amount;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    private async checkBalances(accountId) {\n+        if (!this.balances[accountId]) {\n+            this.loadBalancesAmount(accountId);\n+        }\n+\n+    }\n+\n+\n+    public async income(accountId: number, currency: string, amount: number) {\n+\n+        this.checkBalances(accountId);\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            accountId,\n+            currency,\n+        });\n+        if (balance) {\n+            balance.amount = add(balance.amount, amount);\n+        }\n+        await this.balanceRepository.save(balance);\n+\n+\n+\n+\n+\n+        return balance;\n+    }\n+\n+    public async outcome(accountId: number, currency: string, amount: number) {\n+        return this.income(accountId, currency, multiply(-1, amount));\n+    }\n+\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541424951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,39 +45,39 @@\n                             amount: amount\n                         });\n                         operationType = OperationType.INIT;\n                         operationAmount = amount;\n+                    }\n+                } else {\n \n-                    } else {\n+                    if (compareTo(balance.amount, amount) != 0) {\n+                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+                        operationType = OperationType.ACTUALIZE;\n+                        operationAmount = amount;\n+                    }\n+                    balance.amount = subtract(balance.amount, amount);\n \n-                        if (compareTo(balance.amount, amount) != 0) {\n-                            this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                            operationType = OperationType.ACTUALIZE;\n-                            operationAmount = amount;\n-                        }\n-                        balance.amount = subtract(balance.amount, amount);\n+                }\n \n-                    }\n+                if (balance) {\n+                    await this.balanceRepository.save(balance);\n \n-                    if (balance) {\n-                        await this.balanceRepository.save(balance);\n+                    if (operationType) {\n+                        this.balanceLogRepository.save(\n+                            this.balanceLogRepository.create({\n+                                accountId: balance.accountId,\n+                                balanceId: balance.id,\n+                                operationType,\n+                                amount: operationAmount,\n+                                total: balance.amount\n+                            })\n+                        );\n \n-                        if (operationType) {\n-                            this.balanceLogRepository.save(\n-                                this.balanceLogRepository.create({\n-                                    accountId: balance.accountId,\n-                                    balanceId: balance.id,\n-                                    operationType,\n-                                    amount: operationAmount,\n-                                    total: balance.amount\n-                                })\n-                            );\n \n-\n-                        }\n                     }\n                 }\n-            });\n+            }\n+        });\n \n     }\n \n     public async loadBalancesAmount(accountId: number) {\n@@ -147,156 +147,5 @@\n         return this.income(accountId, currency, multiply(-1, amount));\n     }\n \n \n-}\n-import { Injectable } from \"@nestjs/common\";\n-import { BalancesDto } from \"./dto/balances.dto\";\n-import { InjectRepository } from \"@nestjs/typeorm\";\n-import { Balance } from \"./entities/balance.entity\";\n-import { Repository } from \"typeorm\";\n-import { lock } from \"../helpers\";\n-import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n-\n-const { multiply, add, subtract } = require(\"js-big-decimal\");\n-\n-@Injectable()\n-export class BalanceService {\n-\n-    balances: {\n-        (account_id: number): BalancesDto\n-    } | {} = {};\n-\n-    constructor(\n-        @InjectRepository(Balance)\n-        private balanceRepository: Repository<Balance>,\n-        private balanceLogRepository: Repository<BalanceLog>,\n-        private log: FileLogService,\n-\n-    ) { }\n-\n-    public async set(accountId: number, balances: BalancesDto) {\n-\n-        return await lock.acquire('Balance', async () => {\n-            this.balances[accountId] = balances;\n-            let operationType: OperationType;\n-            let operationAmount;\n-\n-            for (const [currency, amount] of Object.entries(balances)) {\n-                let balance: Balance = await this.balanceRepository.findOneBy({\n-                    accountId,\n-                    currency,\n-                });\n-                if (!balance) {\n-                    if (compareTo(amount, 0) > 0) {\n-                        balance = this.balanceRepository.create({\n-                            accountId,\n-                            currency,\n-                            amount: amount\n-                        });\n-                        operationType = OperationType.INIT;\n-                        operationAmount = amount;\n-\n-                    } else {\n-\n-                        if (compareTo(balance.amount, amount) != 0) {\n-                            this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                            operationType = OperationType.ACTUALIZE;\n-                            operationAmount = amount;\n-                        }\n-                        balance.amount = subtract(balance.amount, amount);\n-\n-                    }\n-\n-                    if (balance) {\n-                        await this.balanceRepository.save(balance);\n-\n-                        if (operationType) {\n-                            this.balanceLogRepository.save(\n-                                this.balanceLogRepository.create({\n-                                    accountId: balance.accountId,\n-                                    balanceId: balance.id,\n-                                    operationType,\n-                                    amount: operationAmount,\n-                                    total: balance.amount\n-                                })\n-                            );\n-                            \n-                    );\n-    }\n-}\n-            }\n-        });\n-\n-    }\n-\n-    public async loadBalancesAmount(accountId: number) {\n-    const balances = await this.balanceRepository.find();\n-    for (const balance of balances) {\n-        if (!this.balances[accountId])\n-            this.balances[accountId] = {};\n-\n-        this.balances[accountId][balance.currency] = balance.amount;\n-    }\n-}\n-\n-    public async getBalanceAmount(accountId: number, currency: string) {\n-\n-    if (this.balances[accountId]?.[currency] != undefined) {\n-        return this.balances[accountId][currency];\n-    }\n-\n-    let balance = await this.balanceRepository.findOneBy({\n-        currency,\n-    });\n-    if (balance) {\n-\n-        if (!this.balances[accountId])\n-            this.balances[accountId] = {};\n-\n-        this.balances[accountId][currency] = balance.amount;\n-        return balance.amount;\n-    } else {\n-        return 0;\n-    }\n-}\n-\n-    private async checkBalances(accountId) {\n-    if (!this.balances[accountId]) {\n-        this.loadBalancesAmount(accountId);\n-    }\n-\n-}\n-\n-\n-    public async income(accountId: number, currency: string, amount: number) {\n-\n-    this.checkBalances(accountId);\n-\n-    if (this.balances[accountId]?.[currency] != undefined) {\n-        this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n-    }\n-\n-    let balance = await this.balanceRepository.findOneBy({\n-        accountId,\n-        currency,\n-    });\n-    if (balance) {\n-        balance.amount = add(balance.amount, amount);\n-    }\n-    await this.balanceRepository.save(balance);\n-\n-\n-\n-\n-\n-    return balance;\n-}\n-\n-    public async outcome(accountId: number, currency: string, amount: number) {\n-    return this.income(accountId, currency, multiply(-1, amount));\n-}\n-\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541459575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n \n                     if (compareTo(balance.amount, amount) != 0) {\n                         this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n                         operationType = OperationType.ACTUALIZE;\n-                        operationAmount = amount;\n+                        operationAmount = subtract(balance.amount, amount);\n                     }\n-                    balance.amount = subtract(balance.amount, amount);\n+                    balance.amount = amount;\n \n                 }\n \n                 if (balance) {\n"
                },
                {
                    "date": 1691541466323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import { Injectable } from \"@nestjs/common\";\n+import { BalancesDto } from \"./dto/balances.dto\";\n+import { InjectRepository } from \"@nestjs/typeorm\";\n+import { Balance } from \"./entities/balance.entity\";\n+import { Repository } from \"typeorm\";\n+import { lock } from \"../helpers\";\n+import { FileLogService } from \"../log/filelog.service\";\n+import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n+const { compareTo } = require(\"js-big-decimal\");\n+\n+const { multiply, add, subtract } = require(\"js-big-decimal\");\n+\n+@Injectable()\n+export class BalanceService {\n+\n+    balances: {\n+        (account_id: number): BalancesDto\n+    } | {} = {};\n+\n+    constructor(\n+        @InjectRepository(Balance)\n+        private balanceRepository: Repository<Balance>,\n+        private balanceLogRepository: Repository<BalanceLog>,\n+        private log: FileLogService,\n+\n+    ) { }\n+\n+    public async set(accountId: number, balances: BalancesDto) {\n+\n+        return await lock.acquire('Balance', async () => {\n+            this.balances[accountId] = balances;\n+            let operationType: OperationType;\n+            let operationAmount;\n+\n+            for (const [currency, amount] of Object.entries(balances)) {\n+                let balance: Balance = await this.balanceRepository.findOneBy({\n+                    accountId,\n+                    currency,\n+                });\n+                if (!balance) {\n+                    if (compareTo(amount, 0) > 0) {\n+                        balance = this.balanceRepository.create({\n+                            accountId,\n+                            currency,\n+                            amount: amount\n+                        });\n+                        operationType = OperationType.INIT;\n+                        operationAmount = amount;\n+                    }\n+                } else {\n+\n+                    if (compareTo(balance.amount, amount) != 0) {\n+                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+                        operationType = OperationType.ACTUALIZE;\n+                        operationAmount = subtract(balance.amount, amount);\n+                        balance.amount = amount;\n+                    }\n+                    \n+\n+                }\n+\n+                if (balance) {\n+                    await this.balanceRepository.save(balance);\n+\n+                    if (operationType) {\n+                        this.balanceLogRepository.save(\n+                            this.balanceLogRepository.create({\n+                                accountId: balance.accountId,\n+                                balanceId: balance.id,\n+                                operationType,\n+                                amount: operationAmount,\n+                                total: balance.amount\n+                            })\n+                        );\n+\n+\n+                    }\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    public async loadBalancesAmount(accountId: number) {\n+        const balances = await this.balanceRepository.find();\n+        for (const balance of balances) {\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][balance.currency] = balance.amount;\n+        }\n+    }\n+\n+    public async getBalanceAmount(accountId: number, currency: string) {\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            return this.balances[accountId][currency];\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            currency,\n+        });\n+        if (balance) {\n+\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][currency] = balance.amount;\n+            return balance.amount;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    private async checkBalances(accountId) {\n+        if (!this.balances[accountId]) {\n+            this.loadBalancesAmount(accountId);\n+        }\n+\n+    }\n+\n+\n+    public async income(accountId: number, currency: string, amount: number) {\n+\n+        this.checkBalances(accountId);\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            accountId,\n+            currency,\n+        });\n+        if (balance) {\n+            balance.amount = add(balance.amount, amount);\n+        }\n+        await this.balanceRepository.save(balance);\n+\n+\n+\n+\n+\n+        return balance;\n+    }\n+\n+    public async outcome(accountId: number, currency: string, amount: number) {\n+        return this.income(accountId, currency, multiply(-1, amount));\n+    }\n+\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541488611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n                     if (compareTo(balance.amount, amount) != 0) {\n                         this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n                         operationType = OperationType.ACTUALIZE;\n-                        operationAmount = subtract(balance.amount, amount);\n+                        operationAmount = subtract(amount, balance.amount);\n                         balance.amount = amount;\n                     }\n                     \n \n@@ -148,156 +148,5 @@\n         return this.income(accountId, currency, multiply(-1, amount));\n     }\n \n \n-}\n-import { Injectable } from \"@nestjs/common\";\n-import { BalancesDto } from \"./dto/balances.dto\";\n-import { InjectRepository } from \"@nestjs/typeorm\";\n-import { Balance } from \"./entities/balance.entity\";\n-import { Repository } from \"typeorm\";\n-import { lock } from \"../helpers\";\n-import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n-\n-const { multiply, add, subtract } = require(\"js-big-decimal\");\n-\n-@Injectable()\n-export class BalanceService {\n-\n-    balances: {\n-        (account_id: number): BalancesDto\n-    } | {} = {};\n-\n-    constructor(\n-        @InjectRepository(Balance)\n-        private balanceRepository: Repository<Balance>,\n-        private balanceLogRepository: Repository<BalanceLog>,\n-        private log: FileLogService,\n-\n-    ) { }\n-\n-    public async set(accountId: number, balances: BalancesDto) {\n-\n-        return await lock.acquire('Balance', async () => {\n-            this.balances[accountId] = balances;\n-            let operationType: OperationType;\n-            let operationAmount;\n-\n-            for (const [currency, amount] of Object.entries(balances)) {\n-                let balance: Balance = await this.balanceRepository.findOneBy({\n-                    accountId,\n-                    currency,\n-                });\n-                if (!balance) {\n-                    if (compareTo(amount, 0) > 0) {\n-                        balance = this.balanceRepository.create({\n-                            accountId,\n-                            currency,\n-                            amount: amount\n-                        });\n-                        operationType = OperationType.INIT;\n-                        operationAmount = amount;\n-                    }\n-                } else {\n-\n-                    if (compareTo(balance.amount, amount) != 0) {\n-                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                        operationType = OperationType.ACTUALIZE;\n-                        operationAmount = subtract(balance.amount, amount);\n-                    }\n-                    balance.amount = amount;\n-\n-                }\n-\n-                if (balance) {\n-                    await this.balanceRepository.save(balance);\n-\n-                    if (operationType) {\n-                        this.balanceLogRepository.save(\n-                            this.balanceLogRepository.create({\n-                                accountId: balance.accountId,\n-                                balanceId: balance.id,\n-                                operationType,\n-                                amount: operationAmount,\n-                                total: balance.amount\n-                            })\n-                        );\n-\n-\n-                    }\n-                }\n-            }\n-        });\n-\n-    }\n-\n-    public async loadBalancesAmount(accountId: number) {\n-        const balances = await this.balanceRepository.find();\n-        for (const balance of balances) {\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][balance.currency] = balance.amount;\n-        }\n-    }\n-\n-    public async getBalanceAmount(accountId: number, currency: string) {\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            return this.balances[accountId][currency];\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            currency,\n-        });\n-        if (balance) {\n-\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][currency] = balance.amount;\n-            return balance.amount;\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-    private async checkBalances(accountId) {\n-        if (!this.balances[accountId]) {\n-            this.loadBalancesAmount(accountId);\n-        }\n-\n-    }\n-\n-\n-    public async income(accountId: number, currency: string, amount: number) {\n-\n-        this.checkBalances(accountId);\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            accountId,\n-            currency,\n-        });\n-        if (balance) {\n-            balance.amount = add(balance.amount, amount);\n-        }\n-        await this.balanceRepository.save(balance);\n-\n-\n-\n-\n-\n-        return balance;\n-    }\n-\n-    public async outcome(accountId: number, currency: string, amount: number) {\n-        return this.income(accountId, currency, multiply(-1, amount));\n-    }\n-\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541497658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,9 @@\n                         this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n                         operationType = OperationType.ACTUALIZE;\n                         operationAmount = subtract(amount, balance.amount);\n                         balance.amount = amount;\n-                    }\n-                    \n+                    }                    \n \n                 }\n \n                 if (balance) {\n"
                },
                {
                    "date": 1691541508210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import { Injectable } from \"@nestjs/common\";\n+import { BalancesDto } from \"./dto/balances.dto\";\n+import { InjectRepository } from \"@nestjs/typeorm\";\n+import { Balance } from \"./entities/balance.entity\";\n+import { Repository } from \"typeorm\";\n+import { lock } from \"../helpers\";\n+import { FileLogService } from \"../log/filelog.service\";\n+import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n+const { compareTo } = require(\"js-big-decimal\");\n+\n+const { multiply, add, subtract } = require(\"js-big-decimal\");\n+\n+@Injectable()\n+export class BalanceService {\n+\n+    balances: {\n+        (account_id: number): BalancesDto\n+    } | {} = {};\n+\n+    constructor(\n+        @InjectRepository(Balance)\n+        private balanceRepository: Repository<Balance>,\n+        private balanceLogRepository: Repository<BalanceLog>,\n+        private log: FileLogService,\n+\n+    ) { }\n+\n+    public async set(accountId: number, balances: BalancesDto) {\n+\n+        return await lock.acquire('Balance', async () => {\n+            this.balances[accountId] = balances;\n+            let operationType: OperationType;\n+            let operationAmount;\n+\n+            for (const [currency, amount] of Object.entries(balances)) {\n+                let balance: Balance = await this.balanceRepository.findOneBy({\n+                    accountId,\n+                    currency,\n+                });\n+                if (!balance) {\n+                    if (compareTo(amount, 0) > 0) {\n+                        balance = this.balanceRepository.create({\n+                            accountId,\n+                            currency,\n+                            amount: amount\n+                        });\n+                        operationType = OperationType.INIT;\n+                        operationAmount = amount;\n+                    }\n+                } else {\n+\n+                    if (compareTo(balance.amount, amount) != 0) {\n+                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+                        operationType = OperationType.ACTUALIZE;\n+                        operationAmount = subtract(amount, balance.amount);\n+                        balance.amount = amount;\n+                    }                    \n+                }\n+\n+                if (balance) {\n+                    await this.balanceRepository.save(balance);\n+\n+                    if (operationType) {\n+                        this.balanceLogRepository.save(\n+                            this.balanceLogRepository.create({\n+                                accountId: balance.accountId,\n+                                balanceId: balance.id,\n+                                operationType,\n+                                amount: operationAmount,\n+                                total: balance.amount\n+                            })\n+                        );\n+\n+\n+                    }\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    public async loadBalancesAmount(accountId: number) {\n+        const balances = await this.balanceRepository.find();\n+        for (const balance of balances) {\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][balance.currency] = balance.amount;\n+        }\n+    }\n+\n+    public async getBalanceAmount(accountId: number, currency: string) {\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            return this.balances[accountId][currency];\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            currency,\n+        });\n+        if (balance) {\n+\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][currency] = balance.amount;\n+            return balance.amount;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    private async checkBalances(accountId) {\n+        if (!this.balances[accountId]) {\n+            this.loadBalancesAmount(accountId);\n+        }\n+\n+    }\n+\n+\n+    public async income(accountId: number, currency: string, amount: number) {\n+\n+        this.checkBalances(accountId);\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            accountId,\n+            currency,\n+        });\n+        if (balance) {\n+            balance.amount = add(balance.amount, amount);\n+        }\n+        await this.balanceRepository.save(balance);\n+\n+\n+\n+\n+\n+        return balance;\n+    }\n+\n+    public async outcome(accountId: number, currency: string, amount: number) {\n+        return this.income(accountId, currency, multiply(-1, amount));\n+    }\n+\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541536060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,8 @@\n                                 amount: operationAmount,\n                                 total: balance.amount\n                             })\n                         );\n-\n-\n                     }\n                 }\n             }\n         });\n@@ -146,156 +144,5 @@\n         return this.income(accountId, currency, multiply(-1, amount));\n     }\n \n \n-}\n-import { Injectable } from \"@nestjs/common\";\n-import { BalancesDto } from \"./dto/balances.dto\";\n-import { InjectRepository } from \"@nestjs/typeorm\";\n-import { Balance } from \"./entities/balance.entity\";\n-import { Repository } from \"typeorm\";\n-import { lock } from \"../helpers\";\n-import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n-\n-const { multiply, add, subtract } = require(\"js-big-decimal\");\n-\n-@Injectable()\n-export class BalanceService {\n-\n-    balances: {\n-        (account_id: number): BalancesDto\n-    } | {} = {};\n-\n-    constructor(\n-        @InjectRepository(Balance)\n-        private balanceRepository: Repository<Balance>,\n-        private balanceLogRepository: Repository<BalanceLog>,\n-        private log: FileLogService,\n-\n-    ) { }\n-\n-    public async set(accountId: number, balances: BalancesDto) {\n-\n-        return await lock.acquire('Balance', async () => {\n-            this.balances[accountId] = balances;\n-            let operationType: OperationType;\n-            let operationAmount;\n-\n-            for (const [currency, amount] of Object.entries(balances)) {\n-                let balance: Balance = await this.balanceRepository.findOneBy({\n-                    accountId,\n-                    currency,\n-                });\n-                if (!balance) {\n-                    if (compareTo(amount, 0) > 0) {\n-                        balance = this.balanceRepository.create({\n-                            accountId,\n-                            currency,\n-                            amount: amount\n-                        });\n-                        operationType = OperationType.INIT;\n-                        operationAmount = amount;\n-                    }\n-                } else {\n-\n-                    if (compareTo(balance.amount, amount) != 0) {\n-                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                        operationType = OperationType.ACTUALIZE;\n-                        operationAmount = subtract(amount, balance.amount);\n-                        balance.amount = amount;\n-                    }                    \n-\n-                }\n-\n-                if (balance) {\n-                    await this.balanceRepository.save(balance);\n-\n-                    if (operationType) {\n-                        this.balanceLogRepository.save(\n-                            this.balanceLogRepository.create({\n-                                accountId: balance.accountId,\n-                                balanceId: balance.id,\n-                                operationType,\n-                                amount: operationAmount,\n-                                total: balance.amount\n-                            })\n-                        );\n-\n-\n-                    }\n-                }\n-            }\n-        });\n-\n-    }\n-\n-    public async loadBalancesAmount(accountId: number) {\n-        const balances = await this.balanceRepository.find();\n-        for (const balance of balances) {\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][balance.currency] = balance.amount;\n-        }\n-    }\n-\n-    public async getBalanceAmount(accountId: number, currency: string) {\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            return this.balances[accountId][currency];\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            currency,\n-        });\n-        if (balance) {\n-\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][currency] = balance.amount;\n-            return balance.amount;\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-    private async checkBalances(accountId) {\n-        if (!this.balances[accountId]) {\n-            this.loadBalancesAmount(accountId);\n-        }\n-\n-    }\n-\n-\n-    public async income(accountId: number, currency: string, amount: number) {\n-\n-        this.checkBalances(accountId);\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            accountId,\n-            currency,\n-        });\n-        if (balance) {\n-            balance.amount = add(balance.amount, amount);\n-        }\n-        await this.balanceRepository.save(balance);\n-\n-\n-\n-\n-\n-        return balance;\n-    }\n-\n-    public async outcome(accountId: number, currency: string, amount: number) {\n-        return this.income(accountId, currency, multiply(-1, amount));\n-    }\n-\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541569584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n \n     }\n \n \n-    public async income(accountId: number, currency: string, amount: number) {\n+    public async income(accountId: number, currency: string, operationType: OperationType, amount: number) {\n \n         this.checkBalances(accountId);\n \n         if (this.balances[accountId]?.[currency] != undefined) {\n@@ -139,9 +139,9 @@\n \n         return balance;\n     }\n \n-    public async outcome(accountId: number, currency: string, amount: number) {\n+    public async outcome(accountId: number, currency: string, operationType: OperationType, amount: number) {\n         return this.income(accountId, currency, multiply(-1, amount));\n     }\n \n \n"
                },
                {
                    "date": 1691541576545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n         return balance;\n     }\n \n     public async outcome(accountId: number, currency: string, operationType: OperationType, amount: number) {\n-        return this.income(accountId, currency, multiply(-1, amount));\n+        return this.income(accountId, currency, operationType, multiply(-1, amount));\n     }\n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541609776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import { Injectable } from \"@nestjs/common\";\n+import { BalancesDto } from \"./dto/balances.dto\";\n+import { InjectRepository } from \"@nestjs/typeorm\";\n+import { Balance } from \"./entities/balance.entity\";\n+import { Repository } from \"typeorm\";\n+import { lock } from \"../helpers\";\n+import { FileLogService } from \"../log/filelog.service\";\n+import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n+const { compareTo } = require(\"js-big-decimal\");\n+\n+const { multiply, add, subtract } = require(\"js-big-decimal\");\n+\n+@Injectable()\n+export class BalanceService {\n+\n+    balances: {\n+        (account_id: number): BalancesDto\n+    } | {} = {};\n+\n+    constructor(\n+        @InjectRepository(Balance)\n+        private balanceRepository: Repository<Balance>,\n+        private balanceLogRepository: Repository<BalanceLog>,\n+        private log: FileLogService,\n+\n+    ) { }\n+\n+    public async set(accountId: number, balances: BalancesDto) {\n+\n+        return await lock.acquire('Balance', async () => {\n+            this.balances[accountId] = balances;\n+            let operationType: OperationType;\n+            let operationAmount;\n+\n+            for (const [currency, amount] of Object.entries(balances)) {\n+                let balance: Balance = await this.balanceRepository.findOneBy({\n+                    accountId,\n+                    currency,\n+                });\n+                if (!balance) {\n+                    if (compareTo(amount, 0) > 0) {\n+                        balance = this.balanceRepository.create({\n+                            accountId,\n+                            currency,\n+                            amount: amount\n+                        });\n+                        operationType = OperationType.INIT;\n+                        operationAmount = amount;\n+                    }\n+                } else {\n+\n+                    if (compareTo(balance.amount, amount) != 0) {\n+                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n+                        operationType = OperationType.ACTUALIZE;\n+                        operationAmount = subtract(amount, balance.amount);\n+                        balance.amount = amount;\n+                    }                    \n+                }\n+\n+                if (balance) {\n+                    await this.balanceRepository.save(balance);\n+\n+                    if (operationType) {\n+                        this.balanceLogRepository.save(\n+                            this.balanceLogRepository.create({\n+                                accountId: balance.accountId,\n+                                balanceId: balance.id,\n+                                operationType,\n+                                amount: operationAmount,\n+                                total: balance.amount\n+                            })\n+                        );\n+                    }\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    public async loadBalancesAmount(accountId: number) {\n+        const balances = await this.balanceRepository.find();\n+        for (const balance of balances) {\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][balance.currency] = balance.amount;\n+        }\n+    }\n+\n+    public async getBalanceAmount(accountId: number, currency: string) {\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            return this.balances[accountId][currency];\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            currency,\n+        });\n+        if (balance) {\n+\n+            if (!this.balances[accountId])\n+                this.balances[accountId] = {};\n+\n+            this.balances[accountId][currency] = balance.amount;\n+            return balance.amount;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    private async checkBalances(accountId) {\n+        if (!this.balances[accountId]) {\n+            this.loadBalancesAmount(accountId);\n+        }\n+\n+    }\n+\n+\n+    public async income(accountId: number, currency: string, operationType: OperationType, amount: number) {\n+\n+        this.checkBalances(accountId);\n+\n+        if (this.balances[accountId]?.[currency] != undefined) {\n+            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n+        }\n+\n+        let balance = await this.balanceRepository.findOneBy({\n+            accountId,\n+            currency,\n+        });\n+        if (balance) {\n+            balance.amount = add(balance.amount, amount);\n+        }\n+        await this.balanceRepository.save(balance);\n+\n+        this.balanceLogRepository.save(\n+            this.balanceLogRepository.create({\n+                accountId: balance.accountId,\n+                balanceId: balance.id,\n+                operationType,\n+                amount: amount,\n+                total: balance.amount\n+            })\n+        );\n+\n+\n+        return balance;\n+    }\n+\n+    public async outcome(accountId: number, currency: string, operationType: OperationType, amount: number) {\n+        return this.income(accountId, currency, operationType, multiply(-1, amount));\n+    }\n+\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541616890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                 balanceId: balance.id,\n                 operationType,\n                 amount: amount,\n                 total: balance.amount\n-            })\n+            });\n         );\n \n \n         return balance;\n@@ -151,153 +151,5 @@\n         return this.income(accountId, currency, operationType, multiply(-1, amount));\n     }\n \n \n-}\n-import { Injectable } from \"@nestjs/common\";\n-import { BalancesDto } from \"./dto/balances.dto\";\n-import { InjectRepository } from \"@nestjs/typeorm\";\n-import { Balance } from \"./entities/balance.entity\";\n-import { Repository } from \"typeorm\";\n-import { lock } from \"../helpers\";\n-import { FileLogService } from \"../log/filelog.service\";\n-import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n-\n-const { multiply, add, subtract } = require(\"js-big-decimal\");\n-\n-@Injectable()\n-export class BalanceService {\n-\n-    balances: {\n-        (account_id: number): BalancesDto\n-    } | {} = {};\n-\n-    constructor(\n-        @InjectRepository(Balance)\n-        private balanceRepository: Repository<Balance>,\n-        private balanceLogRepository: Repository<BalanceLog>,\n-        private log: FileLogService,\n-\n-    ) { }\n-\n-    public async set(accountId: number, balances: BalancesDto) {\n-\n-        return await lock.acquire('Balance', async () => {\n-            this.balances[accountId] = balances;\n-            let operationType: OperationType;\n-            let operationAmount;\n-\n-            for (const [currency, amount] of Object.entries(balances)) {\n-                let balance: Balance = await this.balanceRepository.findOneBy({\n-                    accountId,\n-                    currency,\n-                });\n-                if (!balance) {\n-                    if (compareTo(amount, 0) > 0) {\n-                        balance = this.balanceRepository.create({\n-                            accountId,\n-                            currency,\n-                            amount: amount\n-                        });\n-                        operationType = OperationType.INIT;\n-                        operationAmount = amount;\n-                    }\n-                } else {\n-\n-                    if (compareTo(balance.amount, amount) != 0) {\n-                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n-                        operationType = OperationType.ACTUALIZE;\n-                        operationAmount = subtract(amount, balance.amount);\n-                        balance.amount = amount;\n-                    }                    \n-                }\n-\n-                if (balance) {\n-                    await this.balanceRepository.save(balance);\n-\n-                    if (operationType) {\n-                        this.balanceLogRepository.save(\n-                            this.balanceLogRepository.create({\n-                                accountId: balance.accountId,\n-                                balanceId: balance.id,\n-                                operationType,\n-                                amount: operationAmount,\n-                                total: balance.amount\n-                            })\n-                        );\n-                    }\n-                }\n-            }\n-        });\n-\n-    }\n-\n-    public async loadBalancesAmount(accountId: number) {\n-        const balances = await this.balanceRepository.find();\n-        for (const balance of balances) {\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][balance.currency] = balance.amount;\n-        }\n-    }\n-\n-    public async getBalanceAmount(accountId: number, currency: string) {\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            return this.balances[accountId][currency];\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            currency,\n-        });\n-        if (balance) {\n-\n-            if (!this.balances[accountId])\n-                this.balances[accountId] = {};\n-\n-            this.balances[accountId][currency] = balance.amount;\n-            return balance.amount;\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-    private async checkBalances(accountId) {\n-        if (!this.balances[accountId]) {\n-            this.loadBalancesAmount(accountId);\n-        }\n-\n-    }\n-\n-\n-    public async income(accountId: number, currency: string, operationType: OperationType, amount: number) {\n-\n-        this.checkBalances(accountId);\n-\n-        if (this.balances[accountId]?.[currency] != undefined) {\n-            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n-        }\n-\n-        let balance = await this.balanceRepository.findOneBy({\n-            accountId,\n-            currency,\n-        });\n-        if (balance) {\n-            balance.amount = add(balance.amount, amount);\n-        }\n-        await this.balanceRepository.save(balance);\n-\n-\n-\n-\n-\n-        return balance;\n-    }\n-\n-    public async outcome(accountId: number, currency: string, operationType: OperationType, amount: number) {\n-        return this.income(accountId, currency, operationType, multiply(-1, amount));\n-    }\n-\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691541662250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                 balanceId: balance.id,\n                 operationType,\n                 amount: amount,\n                 total: balance.amount\n-            });\n+            })\n         );\n \n \n         return balance;\n"
                },
                {
                    "date": 1691542441433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,10 @@\n import { Repository } from \"typeorm\";\n import { lock } from \"../helpers\";\n import { FileLogService } from \"../log/filelog.service\";\n import { BalanceLog, OperationType } from \"./entities/balanceLog.entity\";\n-const { compareTo } = require(\"js-big-decimal\");\n+const { compareTo, multiply, add, subtract } = require(\"js-big-decimal\");\n \n-const { multiply, add, subtract } = require(\"js-big-decimal\");\n-\n @Injectable()\n export class BalanceService {\n \n     balances: {\n"
                },
                {
                    "date": 1691542561449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n \n     constructor(\n         @InjectRepository(Balance)\n         private balanceRepository: Repository<Balance>,\n+        @InjectRepository(BalanceLog)\n         private balanceLogRepository: Repository<BalanceLog>,\n         private log: FileLogService,\n \n     ) { }\n"
                }
            ],
            "date": 1691540820709,
            "name": "Commit-0",
            "content": "import { Injectable } from \"@nestjs/common\";\nimport { BalancesDto } from \"./dto/balances.dto\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Balance } from \"./entities/balance.entity\";\nimport { Repository } from \"typeorm\";\nimport { lock } from \"../helpers\";\nimport { FileLogService } from \"../log/filelog.service\";\nimport { BalanceLog } from \"./entities/balanceLog.entity\";\nconst { compareTo } = require(\"js-big-decimal\");\n\nconst { multiply, add } = require(\"js-big-decimal\");\n\n@Injectable()\nexport class BalanceService {\n\n    balances: {\n        (account_id: number): BalancesDto\n    } | {} = {};\n\n    constructor(\n        @InjectRepository(Balance)\n        private balanceRepository: Repository<Balance>,\n        private balanceLogRepository: Repository<BalanceLog>,\n        private log: FileLogService,\n\n    ) { }\n\n    public async set(accountId: number, balances: BalancesDto) {\n\n        return await lock.acquire('Balance', async () => {\n            this.balances[accountId] = balances;\n\n            for (const [currency, amount] of Object.entries(balances)) {\n                let balance: Balance = await this.balanceRepository.findOneBy({\n                    accountId,\n                    currency,\n                });\n                if (!balance) {\n                    if (compareTo(amount, 0) > 0) {\n                        balance = await this.balanceRepository.create({\n                            accountId,\n                            currency,\n                            amount: amount\n                        });\n                    }\n                } else {\n\n                    if (compareTo(balance.amount, amount) != 0) {\n                        this.log.info('Balance discrepancy', currency, 'Need:', balance.amount, 'Reel:', amount);\n                    }\n                    balance.amount = amount;\n                }\n\n                if (balance)\n                    await this.balanceRepository.save(balance);\n            }\n        });\n\n    }\n\n    public async loadBalancesAmount(accountId: number) {\n        const balances = await this.balanceRepository.find();\n        for (const balance of balances) {\n            if (!this.balances[accountId])\n                this.balances[accountId] = {};\n\n            this.balances[accountId][balance.currency] = balance.amount;\n        }\n    }\n\n    public async getBalanceAmount(accountId: number, currency: string) {\n\n        if (this.balances[accountId]?.[currency] != undefined) {\n            return this.balances[accountId][currency];\n        }\n\n        let balance = await this.balanceRepository.findOneBy({\n            currency,\n        });\n        if (balance) {\n\n            if (!this.balances[accountId])\n                this.balances[accountId] = {};\n\n            this.balances[accountId][currency] = balance.amount;\n            return balance.amount;\n        } else {\n            return 0;\n        }\n    }\n\n    private async checkBalances(accountId) {\n        if (!this.balances[accountId])  {\n            this.loadBalancesAmount(accountId);\n        }\n\n    }\n\n\n    public async income(accountId: number, currency: string, amount: number) {\n\n        this.checkBalances(accountId);\n\n        if (this.balances[accountId]?.[currency] != undefined) {\n            this.balances[accountId][currency] = add(this.balances[accountId][currency], amount);\n        }\n\n        let balance = await this.balanceRepository.findOneBy({\n            accountId,\n            currency,\n        });\n        if (balance) {\n            balance.amount = add(balance.amount, amount);\n        }\n        await this.balanceRepository.save(balance);\n\n\n\n\n\n        return balance;\n    }\n\n    public async outcome(accountId: number, currency: string, amount: number) {\n        return this.income(accountId, currency, multiply(-1, amount));\n    }\n\n\n}"
        }
    ]
}