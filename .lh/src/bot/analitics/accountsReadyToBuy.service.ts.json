{
    "sourceFile": "src/bot/analitics/accountsReadyToBuy.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 43,
            "patches": [
                {
                    "date": 1691550936432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691550950972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+  constructor(\r\n+    @InjectRepository(Order)\r\n+    private ordersRepository: Repository<Order>\r\n+  ) { }\r\n+\r\n+    get() {\r\n+\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691551019241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,42 +3,28 @@\n import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n import { Repository } from \"typeorm\";\r\n import { SEC_IN_YEAR } from \"../../helpers\";\r\n import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n \r\n const { add, divide } = require('js-big-decimal');\r\n \r\n @Injectable()\r\n export class AccountsReadyToBuy {\r\n \r\n-  constructor(\r\n-    @InjectRepository(Order)\r\n-    private ordersRepository: Repository<Order>\r\n-  ) { }\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n \r\n     get() {\r\n-\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"order\")\r\n+            .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n+            .select(`\r\n+        \"order\".*,\r\n+        \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class ActiveOrdersAboveProfit {\r\n-\r\n-  constructor(\r\n-    @InjectRepository(Order)\r\n-    private ordersRepository: Repository<Order>\r\n-  ) { }\r\n-\r\n-    get() {\r\n-        \r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691551041946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     ) { }\r\n \r\n     get() {\r\n         return this.balanceRepository\r\n-            .createQueryBuilder(\"order\")\r\n-            .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoinAndSelect(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n             .select(`\r\n         \"order\".*,\r\n         \"pair\".\"buyRate\" as \"buyRate\"\r\n     `)\r\n"
                },
                {
                    "date": 1691551076482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get() {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoinAndSelect(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .select(`\r\n+        \"order\".*,\r\n+        \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552449382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoinAndSelect(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .select(`\r\n+        \"order\".*,\r\n+        \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552457363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .select(`\r\n+        \"order\".*,\r\n+        \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552503533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,102 +19,13 @@\n     get(amount1) {\r\n         return this.balanceRepository\r\n             .createQueryBuilder(\"balance\")\r\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .where(`\"balance\".amount > `)\r\n             .select(`\r\n-        \"order\".*,\r\n-        \"pair\".\"buyRate\" as \"buyRate\"\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n     `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoinAndSelect(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .select(`\r\n-        \"order\".*,\r\n-        \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get() {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoinAndSelect(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .select(`\r\n-        \"order\".*,\r\n-        \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get() {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoinAndSelect(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .select(`\r\n-        \"order\".*,\r\n-        \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552563830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .where(`\"balance\".amount > \"pair\".minAmount`)\r\n+            .andWhere(`\"balance\".amount > :amount1`, [amount1])\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552604948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .where(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate `, [amount1])\r\n+\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552843422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .innerJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n+            .where(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n+            \r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552855413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .innerJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n+            .where(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n+            \r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552905087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n+            \r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691552939664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n+            \r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553036145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order,'order', 'order.currency2 = \"balance\".currency2 and \"order\".rate > \"pair\".rate * (1-:rateMargin) and \"order\".rate < \"pair\".rate * (1+:rateMargin)'), {rateMargin}\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, {amount1})\r\n+            \r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553113880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"buyRate\" as \"buyRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553154243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"sellRate\"\r\n+    `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553166180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"sellRate\"\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553281820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"sellRate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1 )\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553295788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"sellRate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553306113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553323915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553329345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    get(amount1, rateMargin) {\r\n+        return this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553743249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         @InjectRepository(Balance)\r\n         private balanceRepository: Repository<Balance>\r\n     ) { }\r\n \r\n-    get(amount1, rateMargin) {\r\n+    get(amount1: number, rateMargin: number): Promise<any> {\r\n         return this.balanceRepository\r\n             .createQueryBuilder(\"balance\")\r\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n             .leftJoin(Order, 'order', `\r\n@@ -37,547 +37,5 @@\n                 `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"sellRate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"sellRate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1 )\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"sellRate\"\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"sellRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order,'order', 'order.currency2 = \"balance\".currency2 and \"order\".rate > \"pair\".rate * (1-:rateMargin) and \"order\".rate < \"pair\".rate * (1+:rateMargin)'), {rateMargin}\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, {amount1})\r\n-            \r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1, rateMargin) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n-            \r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n-            \r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .innerJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n-            .where(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n-            \r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .innerJoin(Order,'order', 'order.currency2 = \"balance\".currency2')\r\n-            .where(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, [amount1])\r\n-            \r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .where(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate `, [amount1])\r\n-\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .where(`\"balance\".amount > \"pair\".minAmount`)\r\n-            .andWhere(`\"balance\".amount > :amount1`, [amount1])\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1) {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .where(`\"balance\".amount > `)\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"buyRate\" as \"buyRate\"\r\n-    `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553786655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<{\r\n+        accountId: number,\r\n+        rate: number\r\n+    }> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553849263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+interface BuingInfo\r\n+{\r\n+    accountId: number,\r\n+    rate: number\r\n+}\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<BuingInfo> {\r\n+        return await this.balanceRepository<BuingInfo>\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553871858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+interface BuingInfo\r\n+{\r\n+    accountId: number,\r\n+    rate: number\r\n+}\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<BuingInfo> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553892002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+interface BuingInfo\r\n+{\r\n+    accountId: number,\r\n+    rate: number\r\n+}\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<BuingInfo> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany<BuingInfo>();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553909862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         @InjectRepository(Balance)\r\n         private balanceRepository: Repository<Balance>\r\n     ) { }\r\n \r\n-    async get(amount1: number, rateMargin: number): Promise<BuingInfo> {\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n         return await this.balanceRepository\r\n             .createQueryBuilder(\"balance\")\r\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n             .leftJoin(Order, 'order', `\r\n@@ -40,8 +40,8 @@\n                 GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n                 \"balance\".currency1,\r\n                 \"balance\".currency2\r\n                 `)\r\n-            .getRawMany<BuingInfo>();\r\n+            .getRawMany());\r\n     }\r\n \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691553920989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,8 @@\n import { Balance } from \"../../balance/entities/balance.entity\";\r\n \r\n const { add, divide } = require('js-big-decimal');\r\n \r\n-interface BuingInfo\r\n-{\r\n-    accountId: number,\r\n-    rate: number\r\n-}\r\n \r\n @Injectable()\r\n export class AccountsReadyToBuy {\r\n \r\n@@ -40,187 +35,8 @@\n                 GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n                 \"balance\".currency1,\r\n                 \"balance\".currency2\r\n                 `)\r\n-            .getRawMany());\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-interface BuingInfo\r\n-{\r\n-    accountId: number,\r\n-    rate: number\r\n-}\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<BuingInfo> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n-                `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-interface BuingInfo\r\n-{\r\n-    accountId: number,\r\n-    rate: number\r\n-}\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<BuingInfo> {\r\n-        return await this.balanceRepository<BuingInfo>\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<{\r\n-        accountId: number,\r\n-        rate: number\r\n-    }> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555170619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"balance\".currency1,\r\n+                \"balance\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555224273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         return await this.balanceRepository\r\n             .createQueryBuilder(\"balance\")\r\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n             .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n+                    \"order\".currency2 = \"balance\".currency and \r\n                     \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n                     \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n@@ -32,53 +32,11 @@\n             .select(`\r\n                 \"balance\".accountId,\r\n                 \"pair\".\"sellRate\" as \"rate\",\r\n                 GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n+                \"pair\".currency1,\r\n+                \"pair\".currency2\r\n                 `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency2')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency2 and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"balance\".currency1,\r\n-                \"balance\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555252051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n             .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n             .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .andWhere(`\"pair\".isActive = true`)\r\n             .select(`\r\n                 \"balance\".accountId,\r\n                 \"pair\".\"sellRate\" as \"rate\",\r\n                 GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n"
                },
                {
                    "date": 1691555305172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n             .createQueryBuilder(\"balance\")\r\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n             .leftJoin(Order, 'order', `\r\n                     \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".rate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".rate * (1+:rateMargin)`,\r\n+                    \"order\".rate > \"pair\".sellRate * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".sellRate * (1+:rateMargin)`,\r\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n             .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n             .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n"
                },
                {
                    "date": 1691555350091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency and \r\n+                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .andWhere(`\"pair\".isActive = true`)\r\n+            .select(`\r\n+                \"balance\".accountId,\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                \"pair\".currency1,\r\n+                \"pair\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555392126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,57 +30,14 @@\n             .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n             .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n             .andWhere(`\"pair\".isActive = true`)\r\n             .select(`\r\n-                \"balance\".accountId,\r\n+                \"balance\".\"accountId\",\r\n                 \"pair\".\"sellRate\" as \"rate\",\r\n                 GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n                 \"pair\".currency1,\r\n                 \"pair\".currency2\r\n                 `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".sellRate * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".sellRate * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n-            .andWhere(`\"pair\".isActive = true`)\r\n-            .select(`\r\n-                \"balance\".accountId,\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n-                \"pair\".currency1,\r\n-                \"pair\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555483914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,15 +26,15 @@\n                     \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n                     \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".minAmount2`)\r\n+            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n             .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n             .andWhere(`\"pair\".isActive = true`)\r\n             .select(`\r\n                 \"balance\".\"accountId\",\r\n                 \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".minAmount1) as amount1,\r\n+                GREATEST(${amount1}, \"pair\".\"minAmount1\") as amount1,\r\n                 \"pair\".currency1,\r\n                 \"pair\".currency2\r\n                 `)\r\n             .getRawMany();\r\n"
                },
                {
                    "date": 1691555546096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                     \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n             .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".rate`, { amount1 })\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n             .andWhere(`\"pair\".isActive = true`)\r\n             .select(`\r\n                 \"balance\".\"accountId\",\r\n                 \"pair\".\"sellRate\" as \"rate\",\r\n"
                },
                {
                    "date": 1691555600938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency and \r\n+                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n+            .andWhere(`\"pair\".\"isActive\" = true`)\r\n+            .select(`\r\n+                \"balance\".\"accountId\",\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".\"minAmount1\") as amount1,\r\n+                \"pair\".currency1,\r\n+                \"pair\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555847577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency and \r\n+                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n+            .andWhere(`\"pair\".\"isActive\" = true`)\r\n+            .select(`\r\n+                \"balance\".\"accountId\",\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(${amount1}, \"pair\".\"minAmount1\") as amount1,\r\n+                \"pair\".currency1,\r\n+                \"pair\".currency2\r\n+                `, {amount1})\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555861544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency and \r\n+                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n+                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n+            .andWhere(`\"pair\".\"isActive\" = true`)\r\n+            .select(`\r\n+                \"balance\".\"accountId\",\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(cast(${amount1} as DECIMAL), \"pair\".\"minAmount1\") as amount1,\r\n+                \"pair\".currency1,\r\n+                \"pair\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691555924815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n             .createQueryBuilder(\"balance\")\r\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n             .leftJoin(Order, 'order', `\r\n                     \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n+                    \"order\".rate > \"pair\".\"sellRate\" * (1-cast(:rateMargin as decimal)) and \r\n+                    \"order\".rate < \"pair\".\"sellRate\" * (1+cast(:rateMargin as decimal))`,\r\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n             .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n             .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n@@ -39,134 +39,5 @@\n                 `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n-            .andWhere(`\"pair\".\"isActive\" = true`)\r\n-            .select(`\r\n-                \"balance\".\"accountId\",\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".\"minAmount1\") as amount1,\r\n-                \"pair\".currency1,\r\n-                \"pair\".currency2\r\n-                `, {amount1})\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n-            .andWhere(`\"pair\".\"isActive\" = true`)\r\n-            .select(`\r\n-                \"balance\".\"accountId\",\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".\"minAmount1\") as amount1,\r\n-                \"pair\".currency1,\r\n-                \"pair\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".\"sellRate\" * (1-:rateMargin) and \r\n-                    \"order\".rate < \"pair\".\"sellRate\" * (1+:rateMargin)`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n-            .andWhere(`\"pair\".isActive = true`)\r\n-            .select(`\r\n-                \"balance\".\"accountId\",\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(${amount1}, \"pair\".\"minAmount1\") as amount1,\r\n-                \"pair\".currency1,\r\n-                \"pair\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691557823677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+import { Balance } from \"../../balance/entities/balance.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+\r\n+@Injectable()\r\n+export class AccountsReadyToBuy {\r\n+\r\n+    constructor(\r\n+        @InjectRepository(Balance)\r\n+        private balanceRepository: Repository<Balance>\r\n+    ) { }\r\n+\r\n+    async get(amount1: number, rateMargin: number): Promise<any> {\r\n+        return await this.balanceRepository\r\n+            .createQueryBuilder(\"balance\")\r\n+            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n+            .leftJoin(Order, 'order', `\r\n+                    \"order\".currency2 = \"balance\".currency and \r\n+                    \"order\".\"isActive\" = true and\r\n+                    \"order\".\"prefilled\" < \"order\".\"amount1\"\r\n+                    \"order\".rate > \"pair\".\"sellRate\" * (1-cast(:rateMargin as decimal)) and \r\n+                    \"order\".rate < \"pair\".\"sellRate\" * (1+cast(:rateMargin as decimal))`,\r\n+                { rateMargin })\r\n+            .where('\"order\".id is null')\r\n+            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n+            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n+            .andWhere(`\"pair\".\"isActive\" = true`)\r\n+            .select(`\r\n+                \"balance\".\"accountId\",\r\n+                \"pair\".\"sellRate\" as \"rate\",\r\n+                GREATEST(cast(${amount1} as DECIMAL), \"pair\".\"minAmount1\") as amount1,\r\n+                \"pair\".currency1,\r\n+                \"pair\".currency2\r\n+                `)\r\n+            .getRawMany();\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691557860516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n             .leftJoin(Order, 'order', `\r\n                     \"order\".currency2 = \"balance\".currency and \r\n                     \"order\".\"isActive\" = true and\r\n-                    \"order\".\"prefilled\" < \"order\".\"amount1\"\r\n+                    \"order\".\"prefilled\" < \"order\".\"amount1\" and\r\n                     \"order\".rate > \"pair\".\"sellRate\" * (1-cast(:rateMargin as decimal)) and \r\n                     \"order\".rate < \"pair\".\"sellRate\" * (1+cast(:rateMargin as decimal))`,\r\n                 { rateMargin })\r\n             .where('\"order\".id is null')\r\n@@ -41,48 +41,5 @@\n                 `)\r\n             .getRawMany();\r\n     }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-import { Balance } from \"../../balance/entities/balance.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-\r\n-@Injectable()\r\n-export class AccountsReadyToBuy {\r\n-\r\n-    constructor(\r\n-        @InjectRepository(Balance)\r\n-        private balanceRepository: Repository<Balance>\r\n-    ) { }\r\n-\r\n-    async get(amount1: number, rateMargin: number): Promise<any> {\r\n-        return await this.balanceRepository\r\n-            .createQueryBuilder(\"balance\")\r\n-            .innerJoin(Pair, 'pair', 'pair.currency2 = \"balance\".currency')\r\n-            .leftJoin(Order, 'order', `\r\n-                    \"order\".currency2 = \"balance\".currency and \r\n-                    \"order\".rate > \"pair\".\"sellRate\" * (1-cast(:rateMargin as decimal)) and \r\n-                    \"order\".rate < \"pair\".\"sellRate\" * (1+cast(:rateMargin as decimal))`,\r\n-                { rateMargin })\r\n-            .where('\"order\".id is null')\r\n-            .andWhere(`\"balance\".amount > \"pair\".\"minAmount2\"`)\r\n-            .andWhere(`\"balance\".amount > :amount1 * \"pair\".\"sellRate\"`, { amount1 })\r\n-            .andWhere(`\"pair\".\"isActive\" = true`)\r\n-            .select(`\r\n-                \"balance\".\"accountId\",\r\n-                \"pair\".\"sellRate\" as \"rate\",\r\n-                GREATEST(cast(${amount1} as DECIMAL), \"pair\".\"minAmount1\") as amount1,\r\n-                \"pair\".currency1,\r\n-                \"pair\".currency2\r\n-                `)\r\n-            .getRawMany();\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1691550936432,
            "name": "Commit-0",
            "content": "import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { SEC_IN_YEAR } from \"../../helpers\";\r\nimport { Pair } from \"../../exchange/entities/pair.entity\";\r\n\r\nconst { add, divide } = require('js-big-decimal');\r\n\r\n@Injectable()\r\nexport class ActiveOrdersAboveProfit {\r\n\r\n  constructor(\r\n    @InjectRepository(Order)\r\n    private ordersRepository: Repository<Order>\r\n  ) { }\r\n\r\n    get() {\r\n        \r\n    }\r\n\r\n}"
        }
    ]
}