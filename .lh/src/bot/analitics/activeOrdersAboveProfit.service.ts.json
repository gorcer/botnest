{
    "sourceFile": "src/bot/analitics/activeOrdersAboveProfit.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1691552183105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691560046662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return await this.ordersRepository\r\n       .createQueryBuilder(\"order\")\r\n       .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n       .andWhere(`\r\n-        100*(( (\"pair\".\"buyRate\" * ( 1 - ${add(buyFee, sellFee)})) / order.rate)-1) >= \r\n+        100*(( (\"pair\".\"buyRate\" * ( 1 - pair.fee*2 )) / order.rate)-1) >= \r\n         case \r\n           when \r\n             (${now} - \"order\".\"createdAtSec\") < ${secondsInDay}\r\n           then  \r\n"
                },
                {
                    "date": 1691560059721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import { Injectable } from \"@nestjs/common\";\r\n+import { InjectRepository } from \"@nestjs/typeorm\";\r\n+import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n+import { Repository } from \"typeorm\";\r\n+import { SEC_IN_YEAR } from \"../../helpers\";\r\n+import { Pair } from \"../../exchange/entities/pair.entity\";\r\n+\r\n+const { add, divide } = require('js-big-decimal');\r\n+\r\n+@Injectable()\r\n+export class ActiveOrdersAboveProfit {\r\n+\r\n+  constructor(\r\n+    @InjectRepository(Order)\r\n+    private ordersRepository: Repository<Order>\r\n+  ) { }\r\n+\r\n+\r\n+  async get(dailyProfit: number, yerlyProfit: number): Promise<any> {\r\n+\r\n+    const profitPerSecDaily = divide(dailyProfit, SEC_IN_YEAR, 15);\r\n+    const profitPerSecYerly = divide(yerlyProfit, SEC_IN_YEAR, 15);\r\n+    const secondsInDay = 24 * 60 * 60;\r\n+    const now = Math.floor(Date.now() / 1000);\r\n+\r\n+    return await this.ordersRepository\r\n+      .createQueryBuilder(\"order\")\r\n+      .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n+      .andWhere(`\r\n+        100*(( (\"pair\".\"buyRate\" * ( 1 - pair.fee*2 )) / order.rate)-1) >= \r\n+        case \r\n+          when \r\n+            (${now} - \"order\".\"createdAtSec\") < ${secondsInDay}\r\n+          then  \r\n+            ( ${profitPerSecDaily} * (${now} - \"order\".\"createdAtSec\") )\r\n+          else  \r\n+            ( ${profitPerSecYerly} * (${now} - \"order\".\"createdAtSec\") )\r\n+        end        \r\n+        `) // Calculate annual profitability\r\n+      .andWhere(`\"order\".side = :side`, { side: OrderSideEnum.BUY })\r\n+      .andWhere(`\"order\".rate < \"pair\".\"buyRate\"`)\r\n+      .andWhere(`\"order\".\"createdAtSec\" < ${(now + 1)}`)\r\n+      .andWhere('\"order\".\"isActive\" = true')\r\n+      .andWhere('\"order\".\"prefilled\" < \"order\".\"amount1\"')\r\n+      .select(`\r\n+          \"order\".*,\r\n+          \"pair\".\"buyRate\" as \"buyRate\"\r\n+      `)\r\n+      .getRawMany();\r\n+\r\n+  }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691561997162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     return await this.ordersRepository\r\n       .createQueryBuilder(\"order\")\r\n       .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n       .andWhere(`\r\n-        100*(( (\"pair\".\"buyRate\" * ( 1 - pair.fee*2 )) / order.rate)-1) >= \r\n+      100*(((\"pair\".\"buyRate\" * \"order\".amount1*(1-pair.fee)) / (\"order\".amount2 + \"order\".fee))-1) >= \r\n         case \r\n           when \r\n             (${now} - \"order\".\"createdAtSec\") < ${secondsInDay}\r\n           then  \r\n@@ -49,58 +49,5 @@\n       .getRawMany();\r\n \r\n   }\r\n \r\n-}\n-import { Injectable } from \"@nestjs/common\";\r\n-import { InjectRepository } from \"@nestjs/typeorm\";\r\n-import { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\n-import { Repository } from \"typeorm\";\r\n-import { SEC_IN_YEAR } from \"../../helpers\";\r\n-import { Pair } from \"../../exchange/entities/pair.entity\";\r\n-\r\n-const { add, divide } = require('js-big-decimal');\r\n-\r\n-@Injectable()\r\n-export class ActiveOrdersAboveProfit {\r\n-\r\n-  constructor(\r\n-    @InjectRepository(Order)\r\n-    private ordersRepository: Repository<Order>\r\n-  ) { }\r\n-\r\n-\r\n-  async get(buyFee: number, sellFee: number, dailyProfit: number, yerlyProfit: number): Promise<any> {\r\n-\r\n-    const profitPerSecDaily = divide(dailyProfit, SEC_IN_YEAR, 15);\r\n-    const profitPerSecYerly = divide(yerlyProfit, SEC_IN_YEAR, 15);\r\n-    const secondsInDay = 24 * 60 * 60;\r\n-    const now = Math.floor(Date.now() / 1000);\r\n-\r\n-    return await this.ordersRepository\r\n-      .createQueryBuilder(\"order\")\r\n-      .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n-      .andWhere(`\r\n-        100*(( (\"pair\".\"buyRate\" * ( 1 - pair.fee*2 )) / order.rate)-1) >= \r\n-        case \r\n-          when \r\n-            (${now} - \"order\".\"createdAtSec\") < ${secondsInDay}\r\n-          then  \r\n-            ( ${profitPerSecDaily} * (${now} - \"order\".\"createdAtSec\") )\r\n-          else  \r\n-            ( ${profitPerSecYerly} * (${now} - \"order\".\"createdAtSec\") )\r\n-        end        \r\n-        `) // Calculate annual profitability\r\n-      .andWhere(`\"order\".side = :side`, { side: OrderSideEnum.BUY })\r\n-      .andWhere(`\"order\".rate < \"pair\".\"buyRate\"`)\r\n-      .andWhere(`\"order\".\"createdAtSec\" < ${(now + 1)}`)\r\n-      .andWhere('\"order\".\"isActive\" = true')\r\n-      .andWhere('\"order\".\"prefilled\" < \"order\".\"amount1\"')\r\n-      .select(`\r\n-          \"order\".*,\r\n-          \"pair\".\"buyRate\" as \"buyRate\"\r\n-      `)\r\n-      .getRawMany();\r\n-\r\n-  }\r\n-\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1691552183105,
            "name": "Commit-0",
            "content": "import { Injectable } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Order, OrderSideEnum } from \"../../order/entities/order.entity\";\r\nimport { Repository } from \"typeorm\";\r\nimport { SEC_IN_YEAR } from \"../../helpers\";\r\nimport { Pair } from \"../../exchange/entities/pair.entity\";\r\n\r\nconst { add, divide } = require('js-big-decimal');\r\n\r\n@Injectable()\r\nexport class ActiveOrdersAboveProfit {\r\n\r\n  constructor(\r\n    @InjectRepository(Order)\r\n    private ordersRepository: Repository<Order>\r\n  ) { }\r\n\r\n\r\n  async get(buyFee: number, sellFee: number, dailyProfit: number, yerlyProfit: number): Promise<any> {\r\n\r\n    const profitPerSecDaily = divide(dailyProfit, SEC_IN_YEAR, 15);\r\n    const profitPerSecYerly = divide(yerlyProfit, SEC_IN_YEAR, 15);\r\n    const secondsInDay = 24 * 60 * 60;\r\n    const now = Math.floor(Date.now() / 1000);\r\n\r\n    return await this.ordersRepository\r\n      .createQueryBuilder(\"order\")\r\n      .innerJoinAndSelect(Pair, 'pair', 'pair.currency1 = \"order\".currency1 AND pair.currency2 = \"order\".currency2')\r\n      .andWhere(`\r\n        100*(( (\"pair\".\"buyRate\" * ( 1 - ${add(buyFee, sellFee)})) / order.rate)-1) >= \r\n        case \r\n          when \r\n            (${now} - \"order\".\"createdAtSec\") < ${secondsInDay}\r\n          then  \r\n            ( ${profitPerSecDaily} * (${now} - \"order\".\"createdAtSec\") )\r\n          else  \r\n            ( ${profitPerSecYerly} * (${now} - \"order\".\"createdAtSec\") )\r\n        end        \r\n        `) // Calculate annual profitability\r\n      .andWhere(`\"order\".side = :side`, { side: OrderSideEnum.BUY })\r\n      .andWhere(`\"order\".rate < \"pair\".\"buyRate\"`)\r\n      .andWhere(`\"order\".\"createdAtSec\" < ${(now + 1)}`)\r\n      .andWhere('\"order\".\"isActive\" = true')\r\n      .andWhere('\"order\".\"prefilled\" < \"order\".\"amount1\"')\r\n      .select(`\r\n          \"order\".*,\r\n          \"pair\".\"buyRate\" as \"buyRate\"\r\n      `)\r\n      .getRawMany();\r\n\r\n  }\r\n\r\n}"
        }
    ]
}