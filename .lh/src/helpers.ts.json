{
    "sourceFile": "src/helpers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1691551437098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691551449100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,15 +31,15 @@\n     const margin = divide(Math.abs(lastRate - rate), lastRate, 15);\n     return compareTo(margin, needMargin) > 0;\n }\n \n-export function \t/**\n+/**\n * \n * @param price Fix amount to limits\n * @param amount1 \n * @returns \n */\n-private checkLimits(price: number, amount1: number) {\n+export function checkLimits(price: number, amount1: number) {\n    if (compareTo(amount1, this.minAmount) < 0)\n        amount1 = this.minAmount;\n \n    const amount2 = multiply(price, amount1);\n"
                },
                {
                    "date": 1691551610815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+const AsyncLock = require('async-lock');\n+const asynclock = new AsyncLock();\n+\n+const { divide, subtract, multiply, compareTo, add } = require(\"js-big-decimal\");\n+\n+export const SEC_IN_HOUR = 60 * 60;\n+export const SEC_IN_DAY = SEC_IN_HOUR * 24; \n+export const SEC_IN_YEAR = SEC_IN_DAY * 365;\n+\n+export const lock = asynclock;\n+\n+/**\n+ * \n+ * @param n seconds to sleep\n+ */\n+export async function sleep(n) {\n+    await new Promise(r => setTimeout(r, n * 1000));\n+}\n+\n+export function updateModel(model, params) {\n+    for (const [key, value] of Object.entries(params)) {\n+        model[key] = value;\n+    }\n+}\n+\n+export function elapsedSecondsFrom(sec, from) {\n+   return (Date.now()/1000 - from) > sec;\n+}\n+\n+export function isSuitableRate(rate: number, lastRate: number, needMargin:number) {\n+    const margin = divide(Math.abs(lastRate - rate), lastRate, 15);\n+    return compareTo(margin, needMargin) > 0;\n+}\n+\n+/**\n+* \n+* @param price Fix amount to limits\n+* @param amount1 \n+* @returns \n+*/\n+export function checkLimits(price: number, amount1: number=0) {\n+\n+   if (compareTo(amount1, this.minAmount) < 0)\n+       amount1 = this.minAmount;\n+\n+   const amount2 = multiply(price, amount1);\n+   if (compareTo(amount2, this.minCost) < 0) {\n+       amount1 = divide(this.minCost * 1.1, price, 6);\n+   }\n+\n+   return amount1;\n+}\n"
                },
                {
                    "date": 1691551659290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,67 +37,16 @@\n * @param price Fix amount to limits\n * @param amount1 \n * @returns \n */\n-export function checkLimits(price: number, amount1: number=0) {\n+export function checkLimits(minAmount: number, minCost: number, price: number, amount1: number=0) {\n \n-   if (compareTo(amount1, this.minAmount) < 0)\n-       amount1 = this.minAmount;\n+   if (compareTo(amount1, minAmount) < 0)\n+       amount1 = minAmount;\n \n    const amount2 = multiply(price, amount1);\n-   if (compareTo(amount2, this.minCost) < 0) {\n-       amount1 = divide(this.minCost * 1.1, price, 6);\n+   if (compareTo(amount2, minCost) < 0) {\n+       amount1 = divide(minCost * 1.1, price, 6);\n    }\n \n    return amount1;\n }\n-const AsyncLock = require('async-lock');\n-const asynclock = new AsyncLock();\n-\n-const { divide, subtract, multiply, compareTo, add } = require(\"js-big-decimal\");\n-\n-export const SEC_IN_HOUR = 60 * 60;\n-export const SEC_IN_DAY = SEC_IN_HOUR * 24; \n-export const SEC_IN_YEAR = SEC_IN_DAY * 365;\n-\n-export const lock = asynclock;\n-\n-/**\n- * \n- * @param n seconds to sleep\n- */\n-export async function sleep(n) {\n-    await new Promise(r => setTimeout(r, n * 1000));\n-}\n-\n-export function updateModel(model, params) {\n-    for (const [key, value] of Object.entries(params)) {\n-        model[key] = value;\n-    }\n-}\n-\n-export function elapsedSecondsFrom(sec, from) {\n-   return (Date.now()/1000 - from) > sec;\n-}\n-\n-export function isSuitableRate(rate: number, lastRate: number, needMargin:number) {\n-    const margin = divide(Math.abs(lastRate - rate), lastRate, 15);\n-    return compareTo(margin, needMargin) > 0;\n-}\n-\n-/**\n-* \n-* @param price Fix amount to limits\n-* @param amount1 \n-* @returns \n-*/\n-export function checkLimits(price: number, amount1: number) {\n-   if (compareTo(amount1, this.minAmount) < 0)\n-       amount1 = this.minAmount;\n-\n-   const amount2 = multiply(price, amount1);\n-   if (compareTo(amount2, this.minCost) < 0) {\n-       amount1 = divide(this.minCost * 1.1, price, 6);\n-   }\n-\n-   return amount1;\n-}\n"
                }
            ],
            "date": 1691551437098,
            "name": "Commit-0",
            "content": "const AsyncLock = require('async-lock');\nconst asynclock = new AsyncLock();\n\nconst { divide, subtract, multiply, compareTo, add } = require(\"js-big-decimal\");\n\nexport const SEC_IN_HOUR = 60 * 60;\nexport const SEC_IN_DAY = SEC_IN_HOUR * 24; \nexport const SEC_IN_YEAR = SEC_IN_DAY * 365;\n\nexport const lock = asynclock;\n\n/**\n * \n * @param n seconds to sleep\n */\nexport async function sleep(n) {\n    await new Promise(r => setTimeout(r, n * 1000));\n}\n\nexport function updateModel(model, params) {\n    for (const [key, value] of Object.entries(params)) {\n        model[key] = value;\n    }\n}\n\nexport function elapsedSecondsFrom(sec, from) {\n   return (Date.now()/1000 - from) > sec;\n}\n\nexport function isSuitableRate(rate: number, lastRate: number, needMargin:number) {\n    const margin = divide(Math.abs(lastRate - rate), lastRate, 15);\n    return compareTo(margin, needMargin) > 0;\n}\n\nexport function \t/**\n* \n* @param price Fix amount to limits\n* @param amount1 \n* @returns \n*/\nprivate checkLimits(price: number, amount1: number) {\n   if (compareTo(amount1, this.minAmount) < 0)\n       amount1 = this.minAmount;\n\n   const amount2 = multiply(price, amount1);\n   if (compareTo(amount2, this.minCost) < 0) {\n       amount1 = divide(this.minCost * 1.1, price, 6);\n   }\n\n   return amount1;\n}\n"
        }
    ]
}